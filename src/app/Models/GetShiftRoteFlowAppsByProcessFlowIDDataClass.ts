// Generated by https://quicktype.io

export interface GetShiftRoteFlowAppsByProcessFlowIDDataClass {
    ProcessID:               number;
    ShiftRoteType:           string;
    ShiftRoteName:           string;
    ShiftRoteFlowAppsDetail: ShiftRoteFlowAppsDetail[];
    EmpID1:                  string;
    EmpCode1:                string;
    EmpNameC1:               string;
    EmpID2:                  string;
    EmpCode2:                string;
    EmpNameC2:               string;
    Note:                    string;
    Info:                    string;
    MailBody:                string;
    State:                   string;
    DeptName1:               string;
    JobName1:                any;
    DeptName2:               string;
    JobName2:                any;
}

export interface ShiftRoteFlowAppsDetail {
    ShiftRoteDate: string;
    RoteID1:       number;
    RoteCode1:     string;
    RoteName1:     string;
    RoteID2:       number;
    RoteCode2:     string;
    RoteName2:     string;
    RoteID1c:      number;
    RoteCode1c:    string;
    RoteName1c:    string;
    RoteID2c:      number;
    RoteCode2c:    string;
    RoteName2c:    string;
    RoteID1Info:   RoteIDInfoClas;
    RoteID2Info:   RoteIDInfoClas;
    RoteID1cInfo:  RoteIDInfoClas;
    RoteID2cInfo:  RoteIDInfoClas;
}
// Generated by https://quicktype.io

export interface RoteIDInfoClas {
    RoteID:                number;
    RoteCode:              string;
    RoteNameC:             string;
    OnDateTime:            string;
    OffDateTime:           string;
    OnTime:                string;
    OffTime:               string;
    WorkHours:             number;
    DWorkHours:            number;
    OnTimeEarliest:        number;
    OffTimeLatest:         number;
    OtBeginTime:           string;
    YearRestHours:         number;
    LeaveOffTime:          string;
    FlexibleMinute:        number;
    FlexibleMinuteForward: number;
    FlexibleMinuteBehind:  number;
    LateMinute:            number;
    WorkInterval:          number;
    IsCard:                boolean;
    IsShift:               boolean;
    IsDifferShift:         boolean;
    Ride:                  boolean;
    Seq:                   number;
    Holiday:               boolean;
    RoteRest:              RoteREST[];
    RoteMapping:           any;
}

export interface RoteREST {
    RoteID:       number;
    Seq:          number;
    TimeB:        string;
    TimeE:        string;
    Minute:       number;
    IsNormalAbs:  boolean;
    IsNormalOt:   boolean;
    IsHoliDayAbs: boolean;
    IsHoliDayOt:  boolean;
}
