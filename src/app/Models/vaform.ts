import { uploadFileClass } from "./uploadFileClass";
import { GetHoliDayByFormData } from "./GetHoliDayByFormData";

export class vaform {
    ui_title: string;
    leaveman_jobid: string;
    leaveman_name: string;
    wirteman_jobid: string;
    wirteman_name: string;
    writeman_worktime: string;
    startday: string;
    starttime: string;
    endday: string;
    endtime: string;
    vacategrory: GetHoliDayByFormData;
    proxyman_jobid: string;
    proxyman_name: string;
    keyname: string;
    eventdate: string;
    everydayloop: boolean;
    upload: uploadFileClass[];
    cause: string;
    ui_day: string;
    ui_hour: string;
    ui_minute: string;
    // AbsDetail: any[];
    FlowApp: any;
    uishowAbsFlowAppsDetails:showAbsFlowAppsDetailClass[]

    beforholiday: boolean;
    todayCheck: boolean;
  
  }

  

export class showAbsFlowAppsDetailClass {
  vaOneDate: string
  vaOneOnTime: string
  vaOneOffTime: string
  vaRest:vaRestClass[]
  vaRote:vaRote
  AllUse:number
  vaUseDay: string
  vaUseHour: string
  vaUseMinute: string
  
  ActualRote_calCrossDay:boolean

  IsDelete:boolean
}

export interface vaRestClass{
  vaRestOnTime:string
  vaRestOffTime:string
}

// Generated by https://quicktype.io

export interface vaRote {
  RoteID:                number;
  RoteCode:              string;
  RoteNameC:             string;
  DeptCode:              string;
  DeptName:              string;
  OnDateTime:            string;
  OffDateTime:           string;
  OnTime:                string;
  OffTime:               string;
  WorkHours:             number;
  DWorkHours:            number;
  OnTimeEarliest:        number;
  OffTimeLatest:         number;
  OtBeginTime:           string;
  YearRestHours:         number;
  LeaveOffTime:          string;
  FlexibleMinute:        number;
  FlexibleMinuteForward: number;
  FlexibleMinuteBehind:  number;
  LateMinute:            number;
  WorkInterval:          number;
  IsCard:                boolean;
  IsShift:               boolean;
  IsDifferShift:         boolean;
  Ride:                  boolean;
  Seq:                   number;
  Holiday:               boolean;
  RoteRest:              RoteREST[];
  RoteMapping:           null;
}

export interface RoteREST {
  RoteID:       number;
  Seq:          number;
  TimeB:        string;
  TimeE:        string;
  Minute:       number;
  IsNormalAbs:  boolean;
  IsNormalOt:   boolean;
  IsHoliDayAbs: boolean;
  IsHoliDayOt:  boolean;
}
