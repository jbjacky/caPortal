import { Component, OnInit, OnDestroy } from '@angular/core';
import { fromEvent, Subscription } from 'rxjs';
import { debounceTime, takeWhile } from 'rxjs/operators';
import { ViewportScroller } from '@angular/common';
import { ReviewformServiceService } from 'src/app/Service/reviewform-service.service';
import { showVaDetail } from 'src/app/Models/showVaDetail';
import { Router } from '@angular/router';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { void_completionTenNum } from 'src/app/UseVoid/void_CompletionTenNum';
import { chinesenum } from 'src/app/UseVoid/void_chinesenumber';
import { formatDateTime } from 'src/app/UseVoid/void_doFormatDate';
import { getapi_formatTimetoString } from 'src/app/UseVoid/void_doFormatDate';
import { timeOfDay, moreDaytimeOfDay_hour } from 'src/app/UseVoid/void_timeofday';
import { GetAttendClass } from 'src/app/Models/PostData_API_Class/GetAttendClass';
import { uploadFileClass } from 'src/app/Models/uploadFileClass';
import { FileDownloadService } from 'src/app/Service/file-download.service';
import { FlowNodeFinishClass } from 'src/app/Models/PostData_API_Class/FlowNodeFinishClass';

declare let $: any; //use jquery

@Component({
  selector: 'app-reviewform-detail-vacation',
  templateUrl: './reviewform-detail-vacation.component.html',
  styleUrls: ['./reviewform-detail-vacation.component.css']
})
export class ReviewformDetailVacationComponent implements OnInit, OnDestroy {
  ngOnDestroy(): void {
    // throw new Error("Method not implemented.");
    this.api_subscribe = false;
  }
  api_subscribe = true; //ngOnDestroy時要取消訂閱api的subscribe

  sussestext: string = '';
  onesendvaform(_sussestext) { this.sussestext = _sussestext; }
  inbodybuttomdiv = 'inherit';
  buttomdiv = 'inherit';

  inbodybuttomdiv_phone = 'inherit';
  buttomdiv_phone = 'inherit';

  isdesktop: boolean = true;
  constructor(private viewScroller: ViewportScroller,
    public ReviewformServiceService: ReviewformServiceService,
    private router: Router,
    private GetApiDataServiceService: GetApiDataServiceService,
    private FileDownloadService: FileDownloadService) { }
  desktopOrphone() {
    if (window.innerWidth > 768) {
      this.inbodybuttomdiv = 'inherit';
      this.buttomdiv = 'inherit';
      this.inbodybuttomdiv_phone = 'none';
      this.buttomdiv_phone = 'none';
      this.isdesktop = true;
    } else {
      this.inbodybuttomdiv = 'none';
      this.buttomdiv = 'none';
      this.inbodybuttomdiv_phone = 'inherit';
      this.buttomdiv_phone = 'inherit';
      this.isdesktop = false;
    }
  }

  // showVaDetail:ReviewVaDetailClass[]=[];
  uishowVaDetail: uishowVaDetailClass[] = [];//顯示差假時段資料
  uishowProcessFlowID = ''
  showFormSign: FormSign[] = [];
  uishowVaDetailLoading: boolean = false
  ngOnInit() {

    if (!this.ReviewformServiceService.vaDetail) {
      this.router.navigate(['../nav/reviewform']);
    } else {
      this.uishowVaDetailLoading = true;
      this.desktopOrphone();
      fromEvent(window, 'resize')
        .pipe(debounceTime(500))
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe((event) => {
          this.desktopOrphone();
        })
      fromEvent(window, 'scroll')
        .pipe(debounceTime(100)) //當使用者在0.1秒內沒動作就執行
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe((event) => {
          var last = document.body.scrollHeight - window.innerHeight
          //https://pjchender.blogspot.com/2015/04/jquery.html
          if (window.scrollY >= last) {
            //當scrollbar到底時
            if (this.isdesktop) {
              this.inbodybuttomdiv = 'inherit';
              this.buttomdiv = 'none';
            } else {
              this.inbodybuttomdiv_phone = 'inherit';
              this.buttomdiv_phone = 'inherit';
            }
          } else {
            if (this.isdesktop) {
              this.inbodybuttomdiv = 'none';
              this.buttomdiv = 'inherit';
            } else {
              this.inbodybuttomdiv_phone = 'inherit';
              this.buttomdiv_phone = 'inherit';
            }
          }
        })
      console.log(this.ReviewformServiceService.vaDetail.ProcessFlowID)

      // 差假時段多筆資料
      this.GetApiDataServiceService.getWebApiData_GetAbsFlowAppsByProcessFlowID(this.ReviewformServiceService.vaDetail.ProcessFlowID, false)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x: ReviewVaDetailClass[]) => {
            // this.showVaDetail = x;
            this.uishowVaDetail = []
            var i = 0
            for (let data of x) {
              var GetAttend: GetAttendClass = {
                DateB: formatDateTime(data.DateTimeB).getDate,
                DateE: formatDateTime(data.DateTimeE).getDate,
                ListEmpID: [this.ReviewformServiceService.vaDetail.EmpCode],
                ListRoteID: null
              }
              // console.log(GetAttend)
              this.GetApiDataServiceService.getWebApiData_GetAttend(GetAttend).subscribe(
                (Attend: any[]) => {
                  i++
                  console.log(x)
                  // var workhourArray = []
                  var getSetAbsFlowAppsDetail: showAbsFlowAppsDetailClass[] = []

                  for (let AbsFlowAppsDetail of data.AbsFlowAppsDetail) {
                    if (!AbsFlowAppsDetail.RoteRestList) {
                      AbsFlowAppsDetail.RoteRestList = []
                      AbsFlowAppsDetail.RoteRestList.push({
                        RoteID: 0,
                        Seq: 0,
                        TimeB: '1200',
                        TimeE: '1300',
                        Minute: 0,
                        IsNormalAbs: true,
                        IsNormalOt: true,
                        IsHoliDayAbs: true,
                        IsHoliDayOt: true
                      })
                    }///休息時間請阿明加上
                    getSetAbsFlowAppsDetail.push(
                      {
                        vaOneDate: formatDateTime(AbsFlowAppsDetail.DateB).getDate,
                        vaOneOnTime: getapi_formatTimetoString(formatDateTime(AbsFlowAppsDetail.DateTimeB).getTime),
                        vaOneOffTime: getapi_formatTimetoString(formatDateTime(AbsFlowAppsDetail.DateTimeE).getTime),
                        vaRestOnTime: getapi_formatTimetoString(AbsFlowAppsDetail.RoteRestList[0].TimeB),
                        vaRestOffTime: getapi_formatTimetoString(AbsFlowAppsDetail.RoteRestList[0].TimeE),
                        AllUse: AbsFlowAppsDetail.Use,
                        vaUseDay: '0',
                        vaUseHour: '0',
                        vaUseMinute: '0'
                      })
                  }
                  for (let ActualRote_WorkHours of Attend) {
                    var oneDayWorkHour = ActualRote_WorkHours.ActualRote.WorkHours
                    // workhourArray.push(oneDayWorkHour)

                    var AllUse = { day: 0, hour: 0, minute: 0 }
                    for (let uishowAbsFlowAppsDetail of getSetAbsFlowAppsDetail) {
                      uishowAbsFlowAppsDetail.vaUseDay = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).day.toString()
                      uishowAbsFlowAppsDetail.vaUseHour = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).hour.toString()
                      uishowAbsFlowAppsDetail.vaUseMinute = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).minute.toString()

                      AllUse.day = AllUse.day + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).day
                      AllUse.hour = AllUse.hour + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).hour
                      AllUse.minute = AllUse.minute + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).minute
                    }
                  }
                  // console.log(workhourArray)
                  // var AllUse = moreDaytimeOfDay_hour(parseFloat(data.Use), workhourArray)
                  this.uishowVaDetail.push({
                    uitext: '差假時段' + chinesenum(i),
                    startDate: formatDateTime(data.DateTimeB).getDate,
                    startTime: formatDateTime(data.DateTimeB).getTime,
                    endDate: formatDateTime(data.DateTimeE).getDate,
                    endTime: formatDateTime(data.DateTimeE).getTime,
                    proxyName: data.AgentName1,
                    cause: data.Note,
                    AllUseDay: AllUse.day,
                    AllUseHour: AllUse.hour,
                    AllUseMinute: AllUse.minute,
                    HolidayName: data.HoliDayNameC,
                    uploadFile: data.UploadFile,
                    AbsFlowAppsDetail: data.AbsFlowAppsDetail,
                    uishowAbsFlowAppsDetail: getSetAbsFlowAppsDetail
                  })
                  // console.log(this.uishowVaDetail)

                  this.uishowVaDetailLoading = false;
                }
              ),
                (error) => {
                  alert('與api取得資料錯誤，getWebApiData_GetAttend')
                  this.uishowVaDetailLoading = false;
                  console.log(error)
                }
            }
            // console.log(x[0].EmpID)
          },
          (error) => {
            alert('與api取得資料錯誤，GetAbsFlowAppsByProcessFlowID')
            console.log(error)
          }
        )

      //歷程主管意見多筆資料
      this.GetApiDataServiceService.getWebApiData_GetFormSign(this.ReviewformServiceService.vaDetail.ProcessFlowID)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x_GetFormSigns: FormSign[]) => {
            this.showFormSign = []
            for (let x_GetFormSign of x_GetFormSigns) {
              this.showFormSign.push({
                DeptNameC: x_GetFormSign.DeptNameC,
                EmpCode: x_GetFormSign.EmpCode,
                EmpID: x_GetFormSign.EmpID,
                EmpNameC: x_GetFormSign.EmpNameC,
                JobName: x_GetFormSign.JobName,
                Key1: x_GetFormSign.Key1,
                Key2: x_GetFormSign.Key2,
                NodeName: x_GetFormSign.NodeName,
                Note: x_GetFormSign.Note,
                ProcessFlowID: x_GetFormSign.ProcessFlowID,
                SignDate: formatDateTime(x_GetFormSign.SignDate).getDate + ' ' + getapi_formatTimetoString(formatDateTime(x_GetFormSign.SignDate).getTime)
              })
            }
          },
          (error) => {
            alert('與api取得資料錯誤，GetFormSign')
            console.log(error)
          }
        )


      this.uishowProcessFlowID = void_completionTenNum(this.ReviewformServiceService.vaDetail.ProcessFlowID)
    }

  }

  backReview() {
    this.ReviewformServiceService.changeReview('vaTab', this.ReviewformServiceService.showReviewManCode)
  }


  onCheckCollapseIn(i) {
    //確認是否收合請假明細
    if ($('#id' + i).hasClass('collapsed')) {
      $('#' + i + '_text').text('收合請假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + i + '_text').text('展開請假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  onCheckCollapseInpostOpinions() {
    //確認是否收合歷程主管簽核意見
    if (!$('#' + 'mangText').hasClass('collapse in')) {
      $('#' + 'mangText' + '_text').text('收合')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + 'mangText' + '_text').text('展開')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  base64(upload: uploadFileClass) {
    console.log(upload)
    this.FileDownloadService.base64(upload);
  }

  signText: string;
  Approved_Click() {

    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
            State: "3",
            FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "核准",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Approveddialog_sussesdialog').modal('show');
              }
            }
          )
        }
      )
  }
  Sendback_Click() {

    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
            State: "2",
            FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "退回",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Sendbackdialog_sussesdialog').modal('show');
              }
            }
          )
        }
      )
  }
  PutForward_Click() {
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          this.GetApiDataServiceService.getWebApiData_GetManInfo(this.FlowDynamic_EmpID)
            .pipe(takeWhile(() => this.api_subscribe))
            .subscribe(
              x => {
                if (!this.signText) {
                  this.signText = ''
                }
                var FlowNodeFinish: FlowNodeFinishClass = {
                  ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
                  ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
                  State: "1",
                  FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
                  FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
                  Note: this.signText,
                  NodeName: "呈核",
                  ManInfo: y[0],
                  FlowDynamic: {
                    FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
                    RoleID: x[0].RoleID,
                    EmpID: x[0].EmpID
                  }
                }
                console.log(FlowNodeFinish)
                this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
                  (x: any) => {
                    if (x) {
                      $('#PutForwarddialog_sussesdialog').modal('show');
                    }
                  }
                )
              }
            )
        }
      )

    // this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
    //   x=>{

    //   }
    // )
  }

  checkCanSendPutForward() {
    if (!this.FlowDynamic_EmpID) {
      alert('請選擇呈核人員')
    } else {
      $('#PutForwarddialog').modal('show');
    }
  }
  sendFinish() {
    this.backReview()
    this.router.navigate(['../nav/reviewform']);
  }
  FlowDynamic_EmpID: string;
  chooseBase(e) {
    var id
    if (e.length == 0) {
      id = null
      // console.log('清除員工資料')
    } else {
      id = e[0].value.split('，')[0]
    }
    this.FlowDynamic_EmpID = id

  }

}


class ReviewVaDetailClass {
  ProcessID: number
  Serno: string
  HoliDayName: string
  DateB: string
  DateE: string
  DateTimeB: string
  DateTimeE: string
  EventDate: string
  AbsFlowAppsDetail: AbsFlowAppsDetailClass[]
  EmpID: string
  EmpCode: string
  EmpNameC: string
  RoteID: string
  TimeB: string
  TimeE: string
  HoliDayID: string
  HoliDayNameC: string
  Use: string
  Day: string
  Balance: string
  HoliDayUnitName: string
  AgentNobr1: string
  AgentName1: string
  AgentNote: string
  Note: string
  Info: string
  KeyName: string
  UploadFile: any[]
  MailBody: string
  State: string
  Today: boolean
  Circulate: boolean
  Appointment: boolean
}

class AbsFlowAppsDetailClass {
  DateB: string
  DateTimeB: string
  DateTimeE: string
  AbsFlowAppsTrans: any[]
  State: string
  EmpID: string
  TimeB: string
  TimeE: string
  HoliDayID: number
  Use: number
  RoteRestList: RoteRestListClass[]
}
class RoteRestListClass {
  RoteID: number
  Seq: number
  TimeB: string
  TimeE: string
  Minute: number
  IsNormalAbs: boolean
  IsNormalOt: boolean
  IsHoliDayAbs: boolean
  IsHoliDayOt: boolean
}



class FormSign {
  DeptNameC: string
  EmpCode: string
  EmpID: string
  EmpNameC: string
  JobName: string
  Key1: string
  Key2: string
  NodeName: string
  Note: string
  ProcessFlowID: number
  SignDate: string
}
class showFormSign extends FormSign {
  SignDateday: string;
  SignDateTime: string;
}

class uishowVaDetailClass {
  uitext: string
  startDate: string
  startTime: string
  endDate: string
  endTime: string
  proxyName: string
  cause: string
  AllUseDay: number
  AllUseHour: number
  AllUseMinute: number
  HolidayName: string
  uploadFile: uploadFileClass[]
  AbsFlowAppsDetail: AbsFlowAppsDetailClass[]
  uishowAbsFlowAppsDetail: showAbsFlowAppsDetailClass[]
}
class showAbsFlowAppsDetailClass {
  vaOneDate: string
  vaOneOnTime: string
  vaOneOffTime: string
  vaRestOnTime: string
  vaRestOffTime: string
  AllUse: number
  vaUseDay: string
  vaUseHour: string
  vaUseMinute: string
}
