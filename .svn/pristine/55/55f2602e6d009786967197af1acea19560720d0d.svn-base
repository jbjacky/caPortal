import { Component, OnInit, OnDestroy } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, takeWhile } from 'rxjs/operators';
import { ViewportScroller } from '@angular/common';
import { ReviewformServiceService } from 'src/app/Service/reviewform-service.service';
import { Router } from '@angular/router';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { FlowNodeFinishClass } from 'src/app/Models/PostData_API_Class/FlowNodeFinishClass';
import { formatDateTime, getapi_formatTimetoString } from 'src/app/UseVoid/void_doFormatDate';
import { void_completionTenNum } from 'src/app/UseVoid/void_CompletionTenNum';
import { NgxSpinnerService } from 'ngx-spinner';
declare let $: any; //use jquery

@Component({
  selector: 'app-reviewform-detail-forgetform',
  templateUrl: './reviewform-detail-forgetform.component.html',
  styleUrls: ['./reviewform-detail-forgetform.component.css']
})
export class ReviewformDetailForgetformComponent implements OnInit, OnDestroy {
  ngOnDestroy(): void {
    // throw new Error("Method not implemented.");
    this.api_subscribe = false;
  }
  api_subscribe = true; //ngOnDestroy時要取消訂閱api的subscribe

  // @Output() counterChange: EventEmitter<number> = new EventEmitter<number>();//返回修改按鈕

  // previouspage() {
  //   //返回修改按鈕
  //   this.counterChange.emit();
  // } 
  signText: string;
  sussestext: string = '';
  onesendvaform(_sussestext) { this.sussestext = _sussestext; }
  inbodybuttomdiv = 'inherit';
  buttomdiv = 'inherit';

  inbodybuttomdiv_phone = 'inherit';
  buttomdiv_phone = 'inherit';

  isdesktop: boolean = true;
  constructor(private viewScroller: ViewportScroller,
    public ReviewformServiceService: ReviewformServiceService,
    private router: Router,
    private GetApiDataServiceService: GetApiDataServiceService,
    private LoadingPage: NgxSpinnerService) { }
  desktopOrphone() {
    if (window.innerWidth > 768) {
      this.inbodybuttomdiv = 'inherit';
      this.buttomdiv = 'inherit';
      this.inbodybuttomdiv_phone = 'none';
      this.buttomdiv_phone = 'none';
      this.isdesktop = true;
    } else {
      this.inbodybuttomdiv = 'none';
      this.buttomdiv = 'none';
      this.inbodybuttomdiv_phone = 'inherit';
      this.buttomdiv_phone = 'inherit';
      this.isdesktop = false;
    }
  }
  FormSign: showFormSign[] = []
  ngOnInit() {
    // console.log(this.ReviewformServiceService.forgetDetail)
    if (!this.ReviewformServiceService.forgetDetail) {
      this.router.navigate(['../nav/reviewform']);
    } else {

      this.GetApiDataServiceService.getWebApiData_GetFormSign(this.ReviewformServiceService.forgetDetail.ProcessFlowID)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x: FormSign[]) => {
            this.FormSign = []
            for (let data of x) {
              this.FormSign.push({
                DeptNameC: data.DeptNameC,
                EmpCode: data.EmpCode,
                EmpID: data.EmpID,
                EmpNameC: data.EmpNameC,
                JobName: data.JobName,
                Key1: data.Key1,
                Key2: data.Key2,
                NodeName: data.NodeName,
                Note: data.Note,
                ProcessFlowID: data.ProcessFlowID,
                SignDate: data.SignDate,
                SignDateday: formatDateTime(data.SignDate).getDate,
                SignDateTime: getapi_formatTimetoString(formatDateTime(data.SignDate).getTime)
              })
            }
          }
        )
    }

    this.desktopOrphone();
    fromEvent(window, 'resize')
      .pipe(debounceTime(500))
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe((event) => {
        this.desktopOrphone();
      })
    // fromEvent(window, 'scroll')
    //   .pipe(debounceTime(100)) //當使用者在0.1秒內沒動作就執行
    //   .pipe(takeWhile(() => this.api_subscribe))
    //   .subscribe((event) => {
    //     var last = document.body.scrollHeight - window.innerHeight
    //     //https://pjchender.blogspot.com/2015/04/jquery.html
    //     if (window.scrollY >= last) {
    //       //當scrollbar到底時
    //       if (this.isdesktop) {
    //         this.inbodybuttomdiv = 'inherit';
    //         this.buttomdiv = 'none';
    //       } else {
    //         this.inbodybuttomdiv_phone = 'inherit';
    //         this.buttomdiv_phone = 'inherit';
    //       }
    //     } else {
    //       if (this.isdesktop) {
    //         this.inbodybuttomdiv = 'none';
    //         this.buttomdiv = 'inherit';
    //       } else {
    //         this.inbodybuttomdiv_phone = 'inherit';
    //         this.buttomdiv_phone = 'inherit';
    //       }
    //     }
    //   })



  }

  scrollTo(tag: string) {
    this.viewScroller.scrollToAnchor(tag);
    //tag=id連結位置
  }
  backReview() {
    this.ReviewformServiceService.changeReview('forgetTab', this.ReviewformServiceService.showReviewManCode)
  }

  FlowDynamic_EmpID: string;
  chooseBase(e) {
    var id
    if (e.length == 0) {
      id = null
      // console.log('清除員工資料')
    } else {
      id = e[0].value.split('，')[0]
    }
    this.FlowDynamic_EmpID = id

  }
  onCheckCollapseIn() {
    //確認是否收合
    if (!$('#' + 'post2').hasClass('collapse in')) {
      $('#' + 'post2' + '_text').text('收合')
      $('#' + 'post2' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'post2' + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + 'post2' + '_text').text('展開')
      $('#' + 'post2' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'post2' + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  Approved_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.forgetDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.forgetDetail.ProcessApParmAuto),
            State: "3",
            FlowTreeID: this.ReviewformServiceService.forgetDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.forgetDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "核准",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.forgetDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Approveddialog_sussesdialog').modal('show');
                this.LoadingPage.hide()
              }
            }, error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        }, error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )
  }
  Sendback_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.forgetDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.forgetDetail.ProcessApParmAuto),
            State: "2",
            FlowTreeID: this.ReviewformServiceService.forgetDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.forgetDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "退回",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.forgetDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Sendbackdialog_sussesdialog').modal('show');
              }
              this.LoadingPage.hide()
            },error=>{
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        },error=>{
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )
  }
  PutForward_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          this.GetApiDataServiceService.getWebApiData_GetManInfo(this.FlowDynamic_EmpID)
            .pipe(takeWhile(() => this.api_subscribe))
            .subscribe(
              x => {
                if (!this.signText) {
                  this.signText = ''
                }
                var FlowNodeFinish: FlowNodeFinishClass = {
                  ProcessFlowID: parseInt(this.ReviewformServiceService.forgetDetail.ProcessFlowID),
                  ProcessApParmAuto: parseInt(this.ReviewformServiceService.forgetDetail.ProcessApParmAuto),
                  State: "1",
                  FlowTreeID: this.ReviewformServiceService.forgetDetail.FlowTreeID,
                  FlowNodeID: this.ReviewformServiceService.forgetDetail.FlowNodeID,
                  Note: this.signText,
                  NodeName: "呈核",
                  ManInfo: y[0],
                  FlowDynamic: {
                    FlowNode: this.ReviewformServiceService.forgetDetail.FlowNodeID,
                    RoleID: x[0].RoleID,
                    EmpID: x[0].EmpID
                  }
                }
                console.log(FlowNodeFinish)
                this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
                  (x: any) => {
                    if (x) {
                      $('#PutForwarddialog_sussesdialog').modal('show');
                    }
                    this.LoadingPage.hide()
                  },
                  error=>{
                    alert('與api連線異常，getWebApiData_FlowNodeFinish')
                    this.LoadingPage.hide()
                  }
                )
              },
              error=>{
                alert('與api連線異常，getWebApiData_FlowNodeFinish')
                this.LoadingPage.hide()
              }
            )
        },
        error=>{
          alert('與api連線異常，getWebApiData_GetManInfo')
          this.LoadingPage.hide()
        }
      )

    // this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
    //   x=>{

    //   }
    // )
  }

  checkCanSendPutForward() {
    if (!this.FlowDynamic_EmpID) {
      alert('請選擇呈核人員')
    } else {
      $('#PutForwarddialog').modal('show');
    }
  }
  sendFinish() {
    this.backReview()
    this.router.navigate(['../nav/reviewform']);
  }

  completionTenNum(e) {
    return void_completionTenNum(e)
  }
}


class FormSign {
  DeptNameC: string
  EmpCode: string
  EmpID: string
  EmpNameC: string
  JobName: string
  Key1: string
  Key2: string
  NodeName: string
  Note: string
  ProcessFlowID: number
  SignDate: string
}
class showFormSign extends FormSign {
  SignDateday: string;
  SignDateTime: string;
}


