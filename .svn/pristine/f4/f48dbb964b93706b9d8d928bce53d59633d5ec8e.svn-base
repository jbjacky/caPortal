import { Component, OnInit, OnDestroy } from '@angular/core';
import { ViewportScroller } from '@angular/common';
import { fromEvent, Subscription, from } from 'rxjs';
import { debounceTime, takeWhile, concatMap, map, toArray } from 'rxjs/operators';
import { ReviewformServiceService } from 'src/app/Service/reviewform-service.service';
import { void_completionTenNum } from 'src/app/UseVoid/void_CompletionTenNum';
import { Router } from '@angular/router';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { AbscIntegrationHandlerGetAbsFlowAppsClass } from 'src/app/Models/PostData_API_Class/AbscIntegrationHandlerGetAbsFlowAppsClass';
import { formatDateTime, getapi_formatTimetoString, doFormatDate } from 'src/app/UseVoid/void_doFormatDate';
import { GetAttendClass } from 'src/app/Models/PostData_API_Class/GetAttendClass';
import { timeOfDay } from 'src/app/UseVoid/void_timeofday';
import { chinesenum } from 'src/app/UseVoid/void_chinesenumber';
import { FlowNodeFinishClass } from 'src/app/Models/PostData_API_Class/FlowNodeFinishClass';
import { NgxSpinnerService } from 'ngx-spinner';
import { GetFlowViewClass } from 'src/app/Models/PostData_API_Class/GetFlowViewClass';
import { vaSearchFlowSignClass } from 'src/app/View/shareComponent/search-va-form/search-va-form.component';

declare let $: any; //use jquery
@Component({
  selector: 'app-reviewform-detail-delform',
  templateUrl: './reviewform-detail-delform.component.html',
  styleUrls: ['./reviewform-detail-delform.component.css']
})

// 表單審核-銷假單
// state 1  請求銷假
// 2 已銷假
// 3 無異動
//dateArray中才是主管真正要核銷的天
export class ReviewformDetailDelformComponent implements OnInit, OnDestroy {
  ngOnDestroy(): void {
    // throw new Error("Method not implemented.");
    this.api_subscribe = false;
  }
  api_subscribe = true; //ngOnDestroy時要取消訂閱api的subscribe

  // @Output() counterChange: EventEmitter<number> = new EventEmitter<number>();//返回修改按鈕

  // previouspage() {
  //   //返回修改按鈕
  //   this.counterChange.emit();
  // } 

  sussestext: string = '';
  onesendvaform(_sussestext) { this.sussestext = _sussestext; }
  inbodybuttomdiv = 'inherit';
  buttomdiv = 'inherit';

  inbodybuttomdiv_phone = 'inherit';
  buttomdiv_phone = 'inherit';

  isdesktop: boolean = true;
  constructor(private viewScroller: ViewportScroller,
    public ReviewformServiceService: ReviewformServiceService,
    private router: Router,
    private GetApiDataServiceService: GetApiDataServiceService,
    private LoadingPage: NgxSpinnerService) { }
  desktopOrphone() {
    if (window.innerWidth > 768) {
      this.inbodybuttomdiv = 'inherit';
      this.buttomdiv = 'inherit';
      this.inbodybuttomdiv_phone = 'none';
      this.buttomdiv_phone = 'none';
      this.isdesktop = true;
    } else {
      this.inbodybuttomdiv = 'none';
      this.buttomdiv = 'none';
      this.inbodybuttomdiv_phone = 'inherit';
      this.buttomdiv_phone = 'inherit';
      this.isdesktop = false;
    }
  }

  uishowProcessFlowID = ''
  uishowDelDetail = []
  showFormSign: FormSign[] = [];
  ngOnInit() {
    // alert(this.ReviewformServiceService.delDetail.ProcessFlowID)
    if (!this.ReviewformServiceService.delDetail) {
      this.router.navigate(['../nav/reviewform']);
    } else {
      this.desktopOrphone();
      fromEvent(window, 'resize')
        .pipe(debounceTime(500))
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe((event) => {
          this.desktopOrphone();
        })
      // fromEvent(window, 'scroll')
      //   .pipe(debounceTime(100)) //當使用者在0.1秒內沒動作就執行
      //   .pipe(takeWhile(() => this.api_subscribe))
      //   .subscribe((event) => {
      //     var last = document.body.scrollHeight - window.innerHeight
      //     //https://pjchender.blogspot.com/2015/04/jquery.html
      //     if (window.scrollY >= last) {
      //       //當scrollbar到底時
      //       if (this.isdesktop) {
      //         this.inbodybuttomdiv = 'inherit';
      //         this.buttomdiv = 'none';
      //       } else {
      //         this.inbodybuttomdiv_phone = 'inherit';
      //         this.buttomdiv_phone = 'inherit';
      //       }
      //     } else {
      //       if (this.isdesktop) {
      //         this.inbodybuttomdiv = 'none';
      //         this.buttomdiv = 'inherit';
      //       } else {
      //         this.inbodybuttomdiv_phone = 'inherit';
      //         this.buttomdiv_phone = 'inherit';
      //       }
      //     }
      //   })

      // console.log(this.ReviewformServiceService.delDetail)
      var caldateArray = []
      for (let onedatetime of this.ReviewformServiceService.delDetail.dateArray) {
        caldateArray.push(formatDateTime(onedatetime.DateB).getDate)
        caldateArray.push(formatDateTime(onedatetime.DateE).getDate)
      }
      var sortdateArray = caldateArray.sort((a: any, b: any) => {
        let left = Number(new Date(a));
        let right = Number(new Date(b));
        return left - right;
      });
      var firstDate = sortdateArray[0]
      var lastDate = sortdateArray[sortdateArray.length - 1]
      var AbscIntegrationHandlerGetAbsFlowApps: AbscIntegrationHandlerGetAbsFlowAppsClass = {
        DateB: firstDate, //firstDate
        DateE: lastDate, //lastDate
        EmpID: this.ReviewformServiceService.delDetail.EmpCode //this.ReviewformServiceService.delDetail.EmpCode
      }
      this.LoadingPage.show()
      // console.log(AbscIntegrationHandlerGetAbsFlowApps)
      this.GetApiDataServiceService.getWebApiData_AbscIntegrationHandlerGetAbsFlowApps(AbscIntegrationHandlerGetAbsFlowApps)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x: any) => {
            if (x.length == 0) {
              this.LoadingPage.hide()
              // this.loading = false
              // this.showdataIsEmpty = true 
            } else {
              // console.log(x)
              for (let i = 0; i < x.length; i++) {
                this.uishowDelDetail.push({
                  titletext: '銷假時段' + chinesenum((i + 1)),
                  startdate: formatDateTime(x[i].DateB).getDate,
                  starttime: x[i].TimeB,
                  enddate: formatDateTime(x[i].DateE).getDate,
                  endtime: x[i].TimeE,
                  everyday: false,
                  holiday: { id: x[i].HoliDayID, name: x[i].HoliDayNameC },
                  calday: 0,
                  calhour: 0,
                  calminute: 0,

                  detail_delform: []
                })
                for (let detail of x[i].AbsFlowAppsDetail) {
                  var GetAttend: GetAttendClass = {
                    DateB: formatDateTime(detail.DateB).getDate,
                    DateE: formatDateTime(detail.DateB).getDate,
                    ListEmpID: [x[i].EmpCode],
                    ListRoteID: null
                  }
                  // console.log(GetAttend)
                  this.GetApiDataServiceService.getWebApiData_GetAttend(GetAttend)
                    .pipe(takeWhile(() => this.api_subscribe))
                    .subscribe(
                      (w: any) => {
                        // console.log(w)
                        // console.log(this.uishowDelDetail[i])
                        var real = false
                        // console.log(this.ReviewformServiceService.delDetail.dateArray)
                        // console.log(detail)
                        for (let onedateArray of this.ReviewformServiceService.delDetail.dateArray) {
                          if (detail.DateTimeB == onedateArray.DateB && detail.DateTimeE == onedateArray.DateE) {
                            real = true
                          }
                        }

                        this.uishowDelDetail[i].detail_delform.push({
                          disable: 1,
                          state: detail.State,
                          checkState: false,
                          reallyDelShowState: real,
                          startdate: formatDateTime(detail.DateB).getDate,
                          starttime: detail.TimeB,
                          endtime: detail.TimeE,
                          calday: timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).day,
                          calhour: timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).hour,
                          calminute: timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).minute
                        })
                        this.uishowDelDetail[i].calday = this.uishowDelDetail[i].calday + timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).day
                        this.uishowDelDetail[i].calhour = this.uishowDelDetail[i].calhour + timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).hour
                        this.uishowDelDetail[i].calminute = this.uishowDelDetail[i].calminute + timeOfDay(true, detail.Use, w[0].ActualRote.WorkHours).minute

                        console.log(this.uishowDelDetail[i].detail_delform)


                        // this.loading = false
                      }
                    )

                }

              }
              this.LoadingPage.hide()
            }
          },
          (error: any) => {
            alert('api連線錯誤，AbscIntegrationHandlerGetAbsFlowApps')
            this.LoadingPage.hide()
          }
        )
      this.uishowProcessFlowID = void_completionTenNum(this.ReviewformServiceService.delDetail.ProcessFlowID)

    }



    //歷程主管意見多筆資料
    this.GetApiDataServiceService.getWebApiData_GetFormSign(this.ReviewformServiceService.delDetail.ProcessFlowID)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        (x_GetFormSigns: FormSign[]) => {
          this.showFormSign = []
          for (let x_GetFormSign of x_GetFormSigns) {
            this.showFormSign.push({
              DeptNameC: x_GetFormSign.DeptNameC,
              EmpCode: x_GetFormSign.EmpCode,
              EmpID: x_GetFormSign.EmpID,
              EmpNameC: x_GetFormSign.EmpNameC,
              JobName: x_GetFormSign.JobName,
              Key1: x_GetFormSign.Key1,
              Key2: x_GetFormSign.Key2,
              NodeName: x_GetFormSign.NodeName,
              Note: x_GetFormSign.Note,
              ProcessFlowID: x_GetFormSign.ProcessFlowID,
              SignDate: formatDateTime(x_GetFormSign.SignDate).getDate + ' ' + getapi_formatTimetoString(formatDateTime(x_GetFormSign.SignDate).getTime)
            })
          }
        },
        (error) => {
          alert('與api取得資料錯誤，GetFormSign')
          console.log(error)
        }
      )

      
    if (this.ReviewformServiceService.delDetail) {
      this.getRecentHoliday(this.ReviewformServiceService.delDetail.EmpCode)
      //近期請假
    }
  }

  scrollTo(tag: string) {
    this.viewScroller.scrollToAnchor(tag);
    //tag=id連結位置
  }
  backReview() {
    this.ReviewformServiceService.changeReview('delTab', this.ReviewformServiceService.showReviewManCode)
  }


  onCheckCollapseIn(i) {
    //確認是否收合請假明細
    if ($('#id' + i).hasClass('collapsed')) {
      $('#' + i + '_text').text('收合銷假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + i + '_text').text('展開銷假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(0deg)" });
    }
  }


  onCheckCollapseInpostOpinions() {
    //確認是否收合歷程主管簽核意見
    if (!$('#' + 'mangText').hasClass('collapse in')) {
      $('#' + 'mangText' + '_text').text('收合')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + 'mangText' + '_text').text('展開')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  signText: string;
  Approved_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.delDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.delDetail.ProcessApParmAuto),
            State: "3",
            FlowTreeID: this.ReviewformServiceService.delDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.delDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "核准",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.delDetail.FlowNodeID,
              RoleID: '',
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Approveddialog_sussesdialog').modal('show');
              }
              this.LoadingPage.hide()
            }, error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        }, error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )
  }
  Sendback_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.delDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.delDetail.ProcessApParmAuto),
            State: "2",
            FlowTreeID: this.ReviewformServiceService.delDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.delDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "退回",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.delDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                $('#Sendbackdialog_sussesdialog').modal('show');
              }
              this.LoadingPage.hide()
            },
            error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        },
        error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )
  }
  PutForward_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          this.GetApiDataServiceService.getWebApiData_GetManInfo(this.FlowDynamic_EmpID)
            .pipe(takeWhile(() => this.api_subscribe))
            .subscribe(
              x => {
                if (!this.signText) {
                  this.signText = ''
                }
                var FlowNodeFinish: FlowNodeFinishClass = {
                  ProcessFlowID: parseInt(this.ReviewformServiceService.delDetail.ProcessFlowID),
                  ProcessApParmAuto: parseInt(this.ReviewformServiceService.delDetail.ProcessApParmAuto),
                  State: "1",
                  FlowTreeID: this.ReviewformServiceService.delDetail.FlowTreeID,
                  FlowNodeID: this.ReviewformServiceService.delDetail.FlowNodeID,
                  Note: this.signText,
                  NodeName: "呈核",
                  ManInfo: y[0],
                  FlowDynamic: {
                    FlowNode: this.ReviewformServiceService.delDetail.FlowNodeID,
                    RoleID: x[0].RoleID,
                    EmpID: x[0].EmpID
                  }
                }
                console.log(FlowNodeFinish)
                this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
                  (x: any) => {
                    if (x) {
                      $('#PutForwarddialog_sussesdialog').modal('show');
                    }
                    this.LoadingPage.hide()
                  },
                  error=>{
                    this.LoadingPage.hide()
                    alert('與api連線異常，getWebApiData_FlowNodeFinish')
                  }
                )
              },
              error=>{
                this.LoadingPage.hide()
                alert('與api連線異常，getWebApiData_GetManInfo')
              }
            )
        },
        error=>{
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )

    // this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
    //   x=>{

    //   }
    // )
  }

  checkCanSendPutForward() {
    if (!this.FlowDynamic_EmpID) {
      alert('請選擇呈核人員')
    } else {
      $('#PutForwarddialog').modal('show');
    }
  }
  sendFinish() {
    this.backReview()
    this.router.navigate(['../nav/reviewform']);
  }
  FlowDynamic_EmpID: string;
  chooseBase(e) {
    var id
    if (e.length == 0) {
      id = null
      // console.log('清除員工資料')
    } else {
      id = e[0].value.split('，')[0]
    }
    this.FlowDynamic_EmpID = id

  }

  debug() {
    console.log(this.uishowDelDetail)
  }


  
  vaSearchFlowSign: vaSearchFlowSignClass[] = []; //近期假單

  RecentHoliday_DateB: string = '';
  RecentHoliday_DateE: string = '';
  getRecentHoliday(EmpCode) {
    ///近期假單一覽
    
    this.vaSearchFlowSign = []
    var _todayB = new Date()
    _todayB.setMonth(_todayB.getMonth() - 1)
    _todayB.setDate(1)
    this.RecentHoliday_DateB = doFormatDate(_todayB)
    var _todayE = new Date()
    _todayE.setMonth(_todayE.getMonth() + 2)
    _todayE.setDate(0)
    this.RecentHoliday_DateE = doFormatDate(_todayE)
    var GetFlowView: GetFlowViewClass = {
      ListEmpID: [EmpCode],
      DateB: doFormatDate(_todayB),
      DateE: doFormatDate(_todayE),
      FormCode: 'Abs',
      State: '0',
      ProcessFlowID: '0',
      Cond1: '0',
      Cond2: '0',
      Cond3: '0'
    }

    this.GetApiDataServiceService.getWebApiData_GetFlowView(GetFlowView)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        (x: any) => {
          // console.log(x)

          for (let FlowSign of x) {
            this.GetApiDataServiceService.getWebApiData_GetAbsFlowAppsByProcessFlowID(FlowSign.ProcessFlowID, true).pipe(
              concatMap((o: any) => from(o).pipe(
                map((q: any) => {
                  var get = []
                  q.AbsFlowAppsDetail.map((x: any) => {
                    var GetAttend: GetAttendClass = {
                      DateB: formatDateTime(x.DateB).getDate,
                      DateE: formatDateTime(x.DateB).getDate,
                      ListEmpID: [q.EmpCode],
                      ListRoteID: null
                    }

                    // console.log(q)
                    get.push({
                      Attend: GetAttend,
                      Use: x.Use,
                      numberOfVaData: o.length,
                      DateTimeB: x.DateTimeB,
                      DateTimeE: x.DateTimeE,
                      HoliDayID: q.HoliDayID,
                      HoliDayNameC: q.HoliDayNameC
                    })
                  })
                  return get
                })
              )),
              concatMap((w: any) => from(w)),
              concatMap((y: any) => this.GetApiDataServiceService.getWebApiData_GetAttend(y.Attend).pipe(
                map((z: any) => {
                  if (z.length == 0) {
                    console.log(y.Attend.ListEmpID[0] + ' ' + y.Attend.DateB + '沒有出勤資料')
                    return z
                  } else {
                    z[0]["TodayUse"] = y.Use
                    z[0]["vaDateTimeB"] = y.DateTimeB
                    z[0]["vaDateTimeE"] = y.DateTimeE
                    z[0]["numberOfVaData"] = y.numberOfVaData
                    z[0]["HoliDayID"] = y.HoliDayID
                    z[0]["HoliDayNameC"] = y.HoliDayNameC
                    return z[0]
                  }
                }),

              )),
              toArray()

              // last()
            ).pipe(takeWhile(() => this.api_subscribe))
              .subscribe(
                (x: any) => {
                  // console.log(x)
                  if (x.length > 0) {
                    var allDay = 0
                    var allHour = 0
                    var allMinute = 0
                    var calDateArray = []
                    for (let data of x) {
                      if (data.length == 0) {
                        // console.log('沒有出勤資料')
                      } else {
                        var calDay
                        var calHour
                        var calMinute
                        if (data.ActualRote.WorkHours == 0) {
                          calDay = 0
                          calHour = 0
                          calMinute = 0
                          // console.log(data)
                        } else {

                          calDay = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).day
                          calHour = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).hour
                          calMinute = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).minute
                        }
                        // console.log(calDay)
                        allDay = allDay + calDay
                        allHour = allHour + calHour
                        allMinute = allMinute + calMinute
                        calDateArray.push(data.vaDateTimeB)
                        calDateArray.push(data.vaDateTimeE)
                      }
                    }

                    calDateArray.sort((a: any, b: any) => {
                      let left = Number(new Date(a));
                      let right = Number(new Date(b));
                      return left - right;
                    });

                    var output = {
                      allDay: allDay,
                      allHour: allHour,
                      allMinute: allMinute,
                      startdate: formatDateTime(calDateArray[0]).getDate,
                      ontime: formatDateTime(calDateArray[0]).getTime,
                      enddate: formatDateTime(calDateArray[calDateArray.length - 1]).getDate,
                      offtime: formatDateTime(calDateArray[calDateArray.length - 1]).getTime,
                      numberOfVaData: x[0].numberOfVaData
                    }
                    // console.log(output)

                    this.vaSearchFlowSign.push({
                      ProcessFlowID: FlowSign.ProcessFlowID,
                      showProcessFlowID: void_completionTenNum(FlowSign.ProcessFlowID),
                      EmpCode: FlowSign.AppEmpID,
                      EmpNameC: FlowSign.AppEmpName,
                      AppDeptName: FlowSign.AppDeptName,
                      State: FlowSign.State,
                      ManageEmpName: FlowSign.ManageEmpName,
                      Take: FlowSign.Take,
                      HoliDayID: x[0].HoliDayID,
                      HoliDayNameC: x[0].HoliDayNameC,

                      DateB: output.startdate,
                      DateE: output.enddate,
                      TimeB: getapi_formatTimetoString(output.ontime),
                      TimeE: getapi_formatTimetoString(output.offtime),
                      numberOfVaData: output.numberOfVaData,

                      day: output.allDay.toString(),
                      hour: output.allHour.toString(),
                      minute: output.allMinute.toString()
                    })
                  }
                  function custom_sort(a, b) {
                    return b.ProcessFlowID - a.ProcessFlowID;
                  }
                  this.vaSearchFlowSign.sort(custom_sort)
                  // console.log(this.vaSearchFlowSign)
                }

                ,
                (error: any) => {
                  alert('與api連線異常，getWebApiData_GetAbsFlowAppsByProcessFlowID')
                }
              )
          }

        },
        error => {
          alert('與api連線異常，getWebApiData_GetFlowView')
          this.LoadingPage.hide()
        }
      )
  }
}


export class FormSign {
  DeptNameC: string
  EmpCode: string
  EmpID: string
  EmpNameC: string
  JobName: string
  Key1: string
  Key2: string
  NodeName: string
  Note: string
  ProcessFlowID: number
  SignDate: string
}

