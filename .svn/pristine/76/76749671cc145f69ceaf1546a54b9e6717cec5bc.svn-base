import { Component, OnInit, OnDestroy } from '@angular/core';
import { fromEvent, Subscription, from, BehaviorSubject, Observable } from 'rxjs';
import { debounceTime, takeWhile, concatMap, map, toArray } from 'rxjs/operators';
import { ViewportScroller } from '@angular/common';
import { ReviewformServiceService } from 'src/app/Service/reviewform-service.service';
import { showVaDetail } from 'src/app/Models/showVaDetail';
import { Router } from '@angular/router';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { void_completionTenNum } from 'src/app/UseVoid/void_CompletionTenNum';
import { chinesenum } from 'src/app/UseVoid/void_chinesenumber';
import { formatDateTime, doFormatDate } from 'src/app/UseVoid/void_doFormatDate';
import { getapi_formatTimetoString } from 'src/app/UseVoid/void_doFormatDate';
import { timeOfDay, moreDaytimeOfDay_hour } from 'src/app/UseVoid/void_timeofday';
import { GetAttendClass } from 'src/app/Models/PostData_API_Class/GetAttendClass';
import { uploadFileClass } from 'src/app/Models/uploadFileClass';
import { FileDownloadService } from 'src/app/Service/file-download.service';
import { FlowNodeFinishClass } from 'src/app/Models/PostData_API_Class/FlowNodeFinishClass';
import { showUploadFileClass } from 'src/app/Models/showUploadFileClass';
import { NgxSpinnerService } from 'ngx-spinner';
import { showFlowView } from 'src/app/View/search-form/search-form.component';
import { GetFlowViewClass } from 'src/app/Models/PostData_API_Class/GetFlowViewClass';
import { vaSearchFlowSignClass } from 'src/app/View/shareComponent/search-va-form/search-va-form.component';
import { drawCalendarClass, SearchMan } from 'src/app/Models/CalendarClass';
import { GetAttendCalendarClass } from 'src/app/Models/PostData_API_Class/GetAttendCalendarClass';
import { isValidDate } from 'src/app/UseVoid/void_isVaildDatetime';

declare let $: any; //use jquery

@Component({
  selector: 'app-reviewform-detail-vacation',
  templateUrl: './reviewform-detail-vacation.component.html',
  styleUrls: ['./reviewform-detail-vacation.component.css']
})
export class ReviewformDetailVacationComponent implements OnInit, OnDestroy {

  getVaData: showFlowView[] = []//近期假單
  vaSearchFlowSign: vaSearchFlowSignClass[] = []; //近期假單

  private Be_RoteApiData$: BehaviorSubject<any> = new BehaviorSubject<any>(0); //月曆模擬
  Ob_RoteApiData$: Observable<any> = this.Be_RoteApiData$; //月曆模擬

  scrollTo(tag: string) {
    this.viewScroller.scrollToAnchor(tag);
    //tag=id連結位置
  }

  ngOnDestroy(): void {
    // throw new Error("Method not implemented.");
    this.api_subscribe = false;
  }
  api_subscribe = true; //ngOnDestroy時要取消訂閱api的subscribe

  sussestext: string = '';
  onesendvaform(_sussestext) { this.sussestext = _sussestext; }
  inbodybuttomdiv = 'inherit';
  buttomdiv = 'inherit';

  inbodybuttomdiv_phone = 'inherit';
  buttomdiv_phone = 'inherit';

  isdesktop: boolean = true;
  constructor(private viewScroller: ViewportScroller,
    public ReviewformServiceService: ReviewformServiceService,
    private router: Router,
    private GetApiDataServiceService: GetApiDataServiceService,
    private FileDownloadService: FileDownloadService,
    private LoadingPage: NgxSpinnerService) { }
  desktopOrphone() {
    if (window.innerWidth > 768) {
      this.inbodybuttomdiv = 'inherit';
      this.buttomdiv = 'inherit';
      this.inbodybuttomdiv_phone = 'none';
      this.buttomdiv_phone = 'none';
      this.isdesktop = true;
    } else {
      this.inbodybuttomdiv = 'none';
      this.buttomdiv = 'none';
      this.inbodybuttomdiv_phone = 'inherit';
      this.buttomdiv_phone = 'inherit';
      this.isdesktop = false;
    }
  }

  // showVaDetail:ReviewVaDetailClass[]=[];
  uishowVaDetail: uishowVaDetailClass[] = [];//顯示差假時段資料
  uishowProcessFlowID = ''
  showFormSign: FormSign[] = [];
  ngOnInit() {

    if (!this.ReviewformServiceService.vaDetail) {
      this.router.navigate(['../nav/reviewform']);
    } else {
      this.LoadingPage.show();
      this.desktopOrphone();
      fromEvent(window, 'resize')
        .pipe(debounceTime(500))
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe((event) => {
          this.desktopOrphone();
        })
      // 倒底時切換至內頁
      // fromEvent(window, 'scroll')
      //   .pipe(debounceTime(100)) //當使用者在0.1秒內沒動作就執行
      //   .pipe(takeWhile(() => this.api_subscribe))
      //   .subscribe((event) => {
      //     var last = document.body.scrollHeight - window.innerHeight
      //     //https://pjchender.blogspot.com/2015/04/jquery.html
      //     if (window.scrollY >= last) {
      //       //當scrollbar到底時
      //       if (this.isdesktop) {
      //         this.inbodybuttomdiv = 'inherit';
      //         this.buttomdiv = 'none';
      //       } else {
      //         this.inbodybuttomdiv_phone = 'inherit';
      //         this.buttomdiv_phone = 'inherit';
      //       }
      //     } else {
      //       if (this.isdesktop) {
      //         this.inbodybuttomdiv = 'none';
      //         this.buttomdiv = 'inherit';
      //       } else {
      //         this.inbodybuttomdiv_phone = 'inherit';
      //         this.buttomdiv_phone = 'inherit';
      //       }
      //     }
      //   })


      // console.log(this.ReviewformServiceService.vaDetail.ProcessFlowID)

      // 差假時段多筆資料
      this.GetApiDataServiceService.getWebApiData_GetAbsFlowAppsByProcessFlowID(this.ReviewformServiceService.vaDetail.ProcessFlowID, true)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x: ReviewVaDetailClass[]) => {


            var drawCalendar: drawCalendarClass = new drawCalendarClass();
            drawCalendar.SearchMan = new SearchMan()
            drawCalendar.Year = formatDateTime(x[0].DateTimeB).getDate.split('/')[0]
            drawCalendar.Month = formatDateTime(x[0].DateTimeB).getDate.split('/')[1]
            drawCalendar.SearchMan.jobID = this.ReviewformServiceService.vaDetail.EmpCode
            drawCalendar.SearchMan.name = this.ReviewformServiceService.vaDetail.EmpNameC

            drawCalendar.dateworks = []
            // this.showVaDetail = x;
            this.uishowVaDetail = []
            var i = 0
            for (let data of x) {
              var GetAttend: GetAttendClass = {
                DateB: formatDateTime(data.DateTimeB).getDate,
                DateE: formatDateTime(data.DateTimeE).getDate,
                ListEmpID: [this.ReviewformServiceService.vaDetail.EmpCode],
                ListRoteID: null
              }
              // console.log(GetAttend)
              this.GetApiDataServiceService.getWebApiData_GetAttend(GetAttend).subscribe(
                (Attend: any[]) => {
                  i++
                  // console.log(x)
                  // var workhourArray = []
                  var getSetAbsFlowAppsDetail: showAbsFlowAppsDetailClass[] = []

                  for (let AbsFlowAppsDetail of data.AbsFlowAppsDetail) {
                    if (!AbsFlowAppsDetail.RoteRestList) {
                      AbsFlowAppsDetail.RoteRestList = []
                      AbsFlowAppsDetail.RoteRestList.push({
                        RoteID: 0,
                        Seq: 0,
                        TimeB: '1200',
                        TimeE: '1300',
                        Minute: 0,
                        IsNormalAbs: true,
                        IsNormalOt: true,
                        IsHoliDayAbs: true,
                        IsHoliDayOt: true
                      })
                    }///休息時間請阿明加上
                    getSetAbsFlowAppsDetail.push(
                      {
                        vaOneDate: formatDateTime(AbsFlowAppsDetail.DateB).getDate,
                        vaOneOnTime: getapi_formatTimetoString(formatDateTime(AbsFlowAppsDetail.DateTimeB).getTime),
                        vaOneOffTime: getapi_formatTimetoString(formatDateTime(AbsFlowAppsDetail.DateTimeE).getTime),
                        vaRestOnTime: getapi_formatTimetoString(AbsFlowAppsDetail.RoteRestList[0].TimeB),
                        vaRestOffTime: getapi_formatTimetoString(AbsFlowAppsDetail.RoteRestList[0].TimeE),
                        AllUse: AbsFlowAppsDetail.Use,
                        vaUseDay: '0',
                        vaUseHour: '0',
                        vaUseMinute: '0'
                      })


                    drawCalendar.dateworks.push({
                      daytext: formatDateTime(AbsFlowAppsDetail.DateB).getDate,
                      showText: '',
                      routeName: '',
                      onTime: '',
                      offTime: '',
                      isVa: true,
                      isAtterror: false,
                      isHoliday: false
                    })
                    this.Be_RoteApiData$.next(drawCalendar)
                  }
                  for (let ActualRote_WorkHours of Attend) {
                    var oneDayWorkHour = ActualRote_WorkHours.ActualRote.WorkHours
                    // workhourArray.push(oneDayWorkHour)

                    var AllUse = { day: 0, hour: 0, minute: 0 }
                    for (let uishowAbsFlowAppsDetail of getSetAbsFlowAppsDetail) {
                      uishowAbsFlowAppsDetail.vaUseDay = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).day.toString()
                      uishowAbsFlowAppsDetail.vaUseHour = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).hour.toString()
                      uishowAbsFlowAppsDetail.vaUseMinute = timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).minute.toString()

                      AllUse.day = AllUse.day + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).day
                      AllUse.hour = AllUse.hour + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).hour
                      AllUse.minute = AllUse.minute + timeOfDay(true, uishowAbsFlowAppsDetail.AllUse, oneDayWorkHour).minute
                    }
                  }
                  // console.log(workhourArray)
                  // var AllUse = moreDaytimeOfDay_hour(parseFloat(data.Use), workhourArray)
                  this.uishowVaDetail.push({
                    uitext: '差假時段' + chinesenum(i),
                    startDate: formatDateTime(data.DateTimeB).getDate,
                    startTime: formatDateTime(data.DateTimeB).getTime,
                    endDate: formatDateTime(data.DateTimeE).getDate,
                    endTime: formatDateTime(data.DateTimeE).getTime,
                    proxyName: data.AgentName1,
                    cause: data.Note,
                    AllUseDay: AllUse.day,
                    AllUseHour: AllUse.hour,
                    AllUseMinute: AllUse.minute,
                    HolidayName: data.HoliDayNameC,
                    uploadFile: data.UploadFile,
                    AbsFlowAppsDetail: data.AbsFlowAppsDetail,
                    uishowAbsFlowAppsDetail: getSetAbsFlowAppsDetail,
                    Circulate: data.Circulate,
                    Today: data.Today,
                    Appointment: data.Appointment,
                    AutoKey: data.AutoKey
                  })
                  // console.log(this.uishowVaDetail)
                  this.LoadingPage.hide();
                }
              ),
                (error) => {
                  alert('與api取得資料錯誤，getWebApiData_GetAttend')
                  this.LoadingPage.hide();
                  console.log(error)
                }
            }
            // console.log(x[0].EmpID)

          },
          (error) => {
            alert('與api取得資料錯誤，GetAbsFlowAppsByProcessFlowID')
            console.log(error)
          }
        )

      //歷程主管意見多筆資料
      this.GetApiDataServiceService.getWebApiData_GetFormSign(this.ReviewformServiceService.vaDetail.ProcessFlowID)
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x_GetFormSigns: FormSign[]) => {
            this.showFormSign = []
            for (let x_GetFormSign of x_GetFormSigns) {
              this.showFormSign.push({
                DeptNameC: x_GetFormSign.DeptNameC,
                EmpCode: x_GetFormSign.EmpCode,
                EmpID: x_GetFormSign.EmpID,
                EmpNameC: x_GetFormSign.EmpNameC,
                JobName: x_GetFormSign.JobName,
                Key1: x_GetFormSign.Key1,
                Key2: x_GetFormSign.Key2,
                NodeName: x_GetFormSign.NodeName,
                Note: x_GetFormSign.Note,
                ProcessFlowID: x_GetFormSign.ProcessFlowID,
                SignDate: formatDateTime(x_GetFormSign.SignDate).getDate + ' ' + getapi_formatTimetoString(formatDateTime(x_GetFormSign.SignDate).getTime)
              })
            }
          },
          (error) => {
            alert('與api取得資料錯誤，GetFormSign')
            console.log(error)
          }
        )


      this.uishowProcessFlowID = void_completionTenNum(this.ReviewformServiceService.vaDetail.ProcessFlowID)
    }

    if (this.ReviewformServiceService.vaDetail) {
      this.getRecentHoliday(this.ReviewformServiceService.vaDetail.EmpCode)
      //近期請假
    }
  }


  RecentHoliday_DateB: string = '';
  RecentHoliday_DateE: string = '';
  getRecentHoliday(EmpCode) {
    ///近期假單一覽
    this.vaSearchFlowSign = []
    var _todayB = new Date()
    _todayB.setMonth(_todayB.getMonth() - 1)
    _todayB.setDate(1)
    this.RecentHoliday_DateB = doFormatDate(_todayB)
    var _todayE = new Date()
    _todayE.setMonth(_todayE.getMonth() + 2)
    _todayE.setDate(0)
    this.RecentHoliday_DateE = doFormatDate(_todayE)
    var GetFlowView: GetFlowViewClass = {
      ListEmpID: [EmpCode],
      DateB: doFormatDate(_todayB),
      DateE: doFormatDate(_todayE),
      FormCode: 'Abs',
      State: '0',
      ProcessFlowID: '0',
      Cond1: '0',
      Cond2: '0',
      Cond3: '0'
    }

    this.GetApiDataServiceService.getWebApiData_GetFlowView(GetFlowView)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        (x: any) => {
          // console.log(x)

          for (let FlowSign of x) {
            this.GetApiDataServiceService.getWebApiData_GetAbsFlowAppsByProcessFlowID(FlowSign.ProcessFlowID, true).pipe(
              concatMap((o: any) => from(o).pipe(
                map((q: any) => {
                  var get = []
                  q.AbsFlowAppsDetail.map((x: any) => {
                    var GetAttend: GetAttendClass = {
                      DateB: formatDateTime(x.DateB).getDate,
                      DateE: formatDateTime(x.DateB).getDate,
                      ListEmpID: [q.EmpCode],
                      ListRoteID: null
                    }

                    // console.log(q)
                    get.push({
                      Attend: GetAttend,
                      Use: x.Use,
                      numberOfVaData: o.length,
                      DateTimeB: x.DateTimeB,
                      DateTimeE: x.DateTimeE,
                      HoliDayID: q.HoliDayID,
                      HoliDayNameC: q.HoliDayNameC
                    })
                  })
                  return get
                })
              )),
              concatMap((w: any) => from(w)),
              concatMap((y: any) => this.GetApiDataServiceService.getWebApiData_GetAttend(y.Attend).pipe(
                map((z: any) => {
                  if (z.length == 0) {
                    console.log(y.Attend.ListEmpID[0] + ' ' + y.Attend.DateB + '沒有出勤資料')
                    return z
                  } else {
                    z[0]["TodayUse"] = y.Use
                    z[0]["vaDateTimeB"] = y.DateTimeB
                    z[0]["vaDateTimeE"] = y.DateTimeE
                    z[0]["numberOfVaData"] = y.numberOfVaData
                    z[0]["HoliDayID"] = y.HoliDayID
                    z[0]["HoliDayNameC"] = y.HoliDayNameC
                    return z[0]
                  }
                }),

              )),
              toArray()

              // last()
            ).pipe(takeWhile(() => this.api_subscribe))
              .subscribe(
                (x: any) => {
                  // console.log(x)
                  if (x.length > 0) {
                    var allDay = 0
                    var allHour = 0
                    var allMinute = 0
                    var calDateArray = []
                    for (let data of x) {
                      if (data.length == 0) {
                        // console.log('沒有出勤資料')
                      } else {
                        var calDay
                        var calHour
                        var calMinute
                        if (data.ActualRote.WorkHours == 0) {
                          calDay = 0
                          calHour = 0
                          calMinute = 0
                          // console.log(data)
                        } else {

                          calDay = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).day
                          calHour = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).hour
                          calMinute = timeOfDay(true, data.TodayUse, data.ActualRote.WorkHours).minute
                        }
                        // console.log(calDay)
                        allDay = allDay + calDay
                        allHour = allHour + calHour
                        allMinute = allMinute + calMinute
                        calDateArray.push(data.vaDateTimeB)
                        calDateArray.push(data.vaDateTimeE)
                      }
                    }

                    calDateArray.sort((a: any, b: any) => {
                      let left = Number(new Date(a));
                      let right = Number(new Date(b));
                      return left - right;
                    });

                    var output = {
                      allDay: allDay,
                      allHour: allHour,
                      allMinute: allMinute,
                      startdate: formatDateTime(calDateArray[0]).getDate,
                      ontime: formatDateTime(calDateArray[0]).getTime,
                      enddate: formatDateTime(calDateArray[calDateArray.length - 1]).getDate,
                      offtime: formatDateTime(calDateArray[calDateArray.length - 1]).getTime,
                      numberOfVaData: x[0].numberOfVaData
                    }
                    // console.log(output)

                    this.vaSearchFlowSign.push({
                      ProcessFlowID: FlowSign.ProcessFlowID,
                      showProcessFlowID: void_completionTenNum(FlowSign.ProcessFlowID),
                      EmpCode: FlowSign.AppEmpID,
                      EmpNameC: FlowSign.AppEmpName,
                      AppDeptName: FlowSign.AppDeptName,
                      State: FlowSign.State,
                      ManageEmpName: FlowSign.ManageEmpName,
                      Take: FlowSign.Take,
                      HoliDayID: x[0].HoliDayID,
                      HoliDayNameC: x[0].HoliDayNameC,

                      DateB: output.startdate,
                      DateE: output.enddate,
                      TimeB: getapi_formatTimetoString(output.ontime),
                      TimeE: getapi_formatTimetoString(output.offtime),
                      numberOfVaData: output.numberOfVaData,

                      day: output.allDay.toString(),
                      hour: output.allHour.toString(),
                      minute: output.allMinute.toString()
                    })
                  }
                  function custom_sort(a, b) {
                    return b.ProcessFlowID - a.ProcessFlowID;
                  }
                  this.vaSearchFlowSign.sort(custom_sort)
                  // console.log(this.vaSearchFlowSign)
                }

                ,
                (error: any) => {
                  alert('與api連線異常，getWebApiData_GetAbsFlowAppsByProcessFlowID')
                }
              )
          }

        },
        error => {
          alert('與api連線異常，getWebApiData_GetFlowView')
          this.LoadingPage.hide()
        }
      )
  }
  backReview() {
    this.ReviewformServiceService.changeReview('vaTab', this.ReviewformServiceService.showReviewManCode)
  }


  onCheckCollapseIn(i) {
    //確認是否收合請假明細
    if ($('#id' + i).hasClass('collapsed')) {
      $('#' + i + '_text').text('收合請假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + i + '_text').text('展開請假明細')
      $('#' + i + '_img').css({ "transition": "transform 0.5s" });
      $('#' + i + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  onCheckCollapseInpostOpinions() {
    //確認是否收合歷程主管簽核意見
    if (!$('#' + 'mangText').hasClass('collapse in')) {
      $('#' + 'mangText' + '_text').text('收合')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(-180deg)" });

    } else {
      $('#' + 'mangText' + '_text').text('展開')
      $('#' + 'mangText' + '_img').css({ "transition": "transform 0.5s" });
      $('#' + 'mangText' + '_img').css({ "transform": "rotate(0deg)" });
    }
  }

  base64(upload: showUploadFileClass) {
    // console.log(upload.ServerName)
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetUploadFileByOnly(upload.ServerName)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        (data: Array<any>) => {
          this.FileDownloadService.base64(data[0])
          this.LoadingPage.hide()
        }
        , error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetUploadFileByOnly')
        }
      )
    // this.FileDownloadService.base64(upload);
  }

  signText: string;
  Approved_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
            State: "3",
            FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "核准",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          // console.log(FlowNodeFinish)
          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                this.LoadingPage.hide()
                $('#Approveddialog_sussesdialog').modal('show');
              }
            },
            error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        },
        error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )
  }
  Sendback_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          if (!this.signText) {
            this.signText = ''
          }
          var FlowNodeFinish: FlowNodeFinishClass = {
            ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
            ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
            State: "2",
            FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
            FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
            Note: this.signText,
            NodeName: "退回",
            ManInfo: y[0],
            FlowDynamic: {
              FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
              RoleID: y[0].RoleID,
              EmpID: this.ReviewformServiceService.showReviewManCode
            }
          }
          // console.log(FlowNodeFinish)

          this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
            (x: any) => {
              if (x) {
                this.LoadingPage.hide()
                $('#Sendbackdialog_sussesdialog').modal('show');
              }
            },
            error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_FlowNodeFinish')
            }
          )
        }
      )
  }
  PutForward_Click() {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_GetManInfo(this.ReviewformServiceService.showReviewManCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        y => {
          this.GetApiDataServiceService.getWebApiData_GetManInfo(this.FlowDynamic_EmpID)
            .pipe(takeWhile(() => this.api_subscribe))
            .subscribe(
              x => {
                if (!this.signText) {
                  this.signText = ''
                }
                var FlowNodeFinish: FlowNodeFinishClass = {
                  ProcessFlowID: parseInt(this.ReviewformServiceService.vaDetail.ProcessFlowID),
                  ProcessApParmAuto: parseInt(this.ReviewformServiceService.vaDetail.ProcessApParmAuto),
                  State: "1",
                  FlowTreeID: this.ReviewformServiceService.vaDetail.FlowTreeID,
                  FlowNodeID: this.ReviewformServiceService.vaDetail.FlowNodeID,
                  Note: this.signText,
                  NodeName: "呈核",
                  ManInfo: y[0],
                  FlowDynamic: {
                    FlowNode: this.ReviewformServiceService.vaDetail.FlowNodeID,
                    RoleID: x[0].RoleID,
                    EmpID: x[0].EmpID
                  }
                }
                // console.log(FlowNodeFinish)
                this.GetApiDataServiceService.getWebApiData_FlowNodeFinish(FlowNodeFinish).subscribe(
                  (x: any) => {
                    if (x) {
                      this.LoadingPage.hide()
                      $('#PutForwarddialog_sussesdialog').modal('show');
                    }
                  },
                  error => {
                    this.LoadingPage.hide()
                    alert('與api連線異常，getWebApiData_FlowNodeFinish')
                  }

                )
              }
            ), error => {
              this.LoadingPage.hide()
              alert('與api連線異常，getWebApiData_GetManInfo')
            }

        }, error => {
          this.LoadingPage.hide()
          alert('與api連線異常，getWebApiData_GetManInfo')
        }
      )


  }

  checkCanSendPutForward() {
    if (!this.FlowDynamic_EmpID) {
      alert('請選擇呈核人員')
    } else {
      $('#PutForwarddialog').modal('show');
    }
  }
  sendFinish() {
    this.backReview()
    this.router.navigate(['../nav/reviewform']);
  }
  FlowDynamic_EmpID: string;
  chooseBase(e) {
    var id
    if (e.length == 0) {
      id = null
      // console.log('清除員工資料')
    } else {
      id = e[0].value.split('，')[0]
    }
    this.FlowDynamic_EmpID = id

  }
  TodayChange(AutoKey, nowBoolean) {
    this.LoadingPage.show()
    this.GetApiDataServiceService.getWebApiData_SaveToday(AutoKey, nowBoolean)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        x => {
          this.LoadingPage.hide()
        },
        error => {
          alert('與api連線錯誤，getWebApiData_SaveToday')
          this.LoadingPage.hide()
        }
      )
  }


}


class ReviewVaDetailClass {
  ProcessID: number
  Serno: string
  HoliDayName: string
  DateB: string
  DateE: string
  DateTimeB: string
  DateTimeE: string
  EventDate: string
  AbsFlowAppsDetail: AbsFlowAppsDetailClass[]
  EmpID: string
  EmpCode: string
  EmpNameC: string
  RoteID: string
  TimeB: string
  TimeE: string
  HoliDayID: string
  HoliDayNameC: string
  Use: string
  Day: string
  Balance: string
  HoliDayUnitName: string
  AgentNobr1: string
  AgentName1: string
  AgentNote: string
  Note: string
  Info: string
  KeyName: string
  UploadFile: any[]
  MailBody: string
  State: string
  Today: boolean
  Circulate: boolean
  Appointment: boolean
  AutoKey: number
}

class AbsFlowAppsDetailClass {
  DateB: string
  DateTimeB: string
  DateTimeE: string
  AbsFlowAppsTrans: any[]
  State: string
  EmpID: string
  TimeB: string
  TimeE: string
  HoliDayID: number
  Use: number
  RoteRestList: RoteRestListClass[]
}
class RoteRestListClass {
  RoteID: number
  Seq: number
  TimeB: string
  TimeE: string
  Minute: number
  IsNormalAbs: boolean
  IsNormalOt: boolean
  IsHoliDayAbs: boolean
  IsHoliDayOt: boolean
}



class FormSign {
  DeptNameC: string
  EmpCode: string
  EmpID: string
  EmpNameC: string
  JobName: string
  Key1: string
  Key2: string
  NodeName: string
  Note: string
  ProcessFlowID: number
  SignDate: string
}
class showFormSign extends FormSign {
  SignDateday: string;
  SignDateTime: string;
}

class uishowVaDetailClass {
  uitext: string
  startDate: string
  startTime: string
  endDate: string
  endTime: string
  proxyName: string
  cause: string
  AllUseDay: number
  AllUseHour: number
  AllUseMinute: number
  HolidayName: string
  uploadFile: uploadFileClass[]
  AbsFlowAppsDetail: AbsFlowAppsDetailClass[]
  uishowAbsFlowAppsDetail: showAbsFlowAppsDetailClass[]
  Circulate: boolean
  Today: boolean
  Appointment: boolean
  AutoKey: number
}
class showAbsFlowAppsDetailClass {
  vaOneDate: string
  vaOneOnTime: string
  vaOneOffTime: string
  vaRestOnTime: string
  vaRestOffTime: string
  AllUse: number
  vaUseDay: string
  vaUseHour: string
  vaUseMinute: string
}