import { Component, OnInit, AfterViewInit, OnDestroy, ViewChild } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, takeWhile } from 'rxjs/operators';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { GetApiUserService } from 'src/app/Service/get-api-user.service';
import { SearchMan } from 'src/app/Models/CalendarClass';
import { GetFlowViewClass } from 'src/app/Models/PostData_API_Class/GetFlowViewClass';
import { SearchVaFormComponent } from '../shareComponent/search-va-form/search-va-form.component';
import { ViewportScroller } from '@angular/common';
import { SearchDelFormComponent } from '../shareComponent/search-del-form/search-del-form.component';
import { SearchForgetFormComponent } from '../shareComponent/search-forget-form/search-forget-form.component';
declare let $: any; //use jquery

@Component({
  selector: 'app-search-form',
  templateUrl: './search-form.component.html',
  styleUrls: ['./search-form.component.css']
})
export class SearchFormComponent implements OnInit, AfterViewInit, OnDestroy {
  ngOnDestroy(): void {
    this.formEvent_WindowResize.unsubscribe();
    this.formEvent_TopDivGoTop.unsubscribe();
    this.api_subscribe= false;
  }
  api_subscribe = true; //ngOnDestroy時要取消訂閱api的subscribe

  diolog_state: boolean = false;

  selectSearchForm = 'vaform'; //選擇表單種類
  selectState ='0'//選擇表單狀態
  selectFilterCondition = 'All' //選擇篩選條件
  selcetHolidayID = '';//選擇假別種類
  selcetTodaychooseID = '0'//選擇當日請假是或否

  isSearch: boolean = false; //第一次沒按不顯示查詢結果
  showSelectSearchForm = ''; //顯示表單種類
  HoliDay: HoliDay[] = []; //假別種類
  TodayVa = [{ id: '0', name: '否' }, { id: '1', name: '是' }]
  SearchMan: SearchMan = new SearchMan();

  setFlowView: showFlowView[] = []//傳給查詢結果-請假單
  loading: boolean = false;
  constructor(private GetApiDataServiceService: GetApiDataServiceService,
    private GetApiUserService: GetApiUserService,
    private viewScroller: ViewportScroller, ) { }
  ngOnInit() {
    this.GetApiUserService.counter$
    .pipe(takeWhile(()=>this.api_subscribe))
    .subscribe(
      (x: any) => {
        this.SearchMan.jobID = x.EmpCode
        if(x.EmpNameC){
        this.SearchMan.name = x.EmpNameC
        }else{
        this.SearchMan.name = x.EmpNameE
          
        }
      }
    )
    this.GetApiDataServiceService.getWebApiData_GetHoliDayByForm()
    .pipe(takeWhile(()=>this.api_subscribe))
    .subscribe(
      (x: any) => {
        for (let data of x) {
          this.HoliDay.push(
            {
              HoliDayID: data.HoliDayID,
              HoliDayNameC: data.HoliDayNameC,
              AutoFlowStart: data.AutoFlowStart,
              HoliDayKindID: data.HoliDayKindID,
              HoliDayCode: data.HoliDayCode
            })

          this.selcetHolidayID = this.HoliDay[0].HoliDayID

        }
      }
    )
  }
  chooseForm = [{
    select: '請假單',
    value: 'vaform',
    filter: [{ value: 'All', name: '全部' }, { value: 'vaType', name: '假別種類' }, { value: 'Sameday', name: '當日請假' }]
  }, {
    select: '銷假單',
    value: 'delform',
    filter: [{ value: 'All', name: '全部' }, { value: 'vaType', name: '假別種類' }, { value: 'Sameday', name: '當日請假' }]
  }, {
    select: '調班單',
    value: 'changeform',
    filter: [{ value: 'All', name: '全部' }, { value: 'pleasechange', name: '請求調班' }, { value: 'twopeoplechange', name: '雙人調班' }, { value: 'rzchange', name: '例休互調' }]
  }, {
    select: '考勤異常確認單',
    value: 'forgetform',
    filter: [{ value: 'All', name: '全部' }]
  }]
  changeChooseForm() {
    for (let i = 0; i < this.chooseForm.length; i++) {
      if (this.selectSearchForm == this.chooseForm[i].value) {
        return this.chooseForm[i].filter
      }
    }
  }
  selectSearchFormChange() {
    this.selectFilterCondition = 'All'
  }

  @ViewChild(SearchVaFormComponent) SearchVaFormComponent: SearchVaFormComponent;
  @ViewChild(SearchVaFormComponent) SearchDelFormComponent: SearchDelFormComponent;
  // @ViewChild(SearchVaFormComponent) SearchDelFormComponent: SearchDelFormComponent;
  @ViewChild(SearchVaFormComponent) SearchForgetFormComponent: SearchForgetFormComponent;
  showVaDataDetails: boolean // 每點一次搜尋Detil
  onSearch() {
    this.loading = true
    this.showSelectSearchForm =''

    if (window.innerWidth < 800) {
      $('#bt_sideMenu_text').text('展開查詢選單')
      $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
      $('#bt_sideMenu_img').css({ "transform": "rotate(0deg)" });
      $('#searchMenu').collapse('hide')
      $('#phonetopdiv').css({ "height": "inherit" });

      $('body').css("overflow-y", "auto");
      this.diolog_state = false

    }
    // alert(this.selectSearchForm);

    //表單狀態-State-0全部、1呈核中、2重擬、3已核准、4已抽單
    //篩選條件-請假單-Cond1-0全部、1假別種類、2當日請假
    //假別種類-請假單-假別種類-Cond2-HoliDayID
    //假別種類-請假單-當日請假-Cond2-0否、1是

    switch (this.selectSearchForm) {
      case 'vaform':
        // console.log(this.selectState)
        var va_setCond1 = '0'
        var va_setCond2 = '0'
        if(this.selectFilterCondition == 'All'){
          va_setCond1='0'
          va_setCond2='0'
        }
        else if(this.selectFilterCondition == 'vaType'){
          //篩選條件-假別種類
          va_setCond1='1'
          va_setCond2 = this.selcetHolidayID
        }
        else if(this.selectFilterCondition=='Sameday'){
          //篩選條件-當日請假
          va_setCond1='2'
          va_setCond2 = this.selcetTodaychooseID
        }

        var GetFlowView_Abs: GetFlowViewClass = {
          "ListEmpID": [
            "051005"
          ],
          "DateB": "2018/1/1",
          "DateE": "2019/12/31",
          "FormCode": "Abs",
          "State": this.selectState,
          "ProcessFlowID": "0",
          "Cond1": va_setCond1,
          "Cond2": va_setCond2,
          "Cond3": "0"
        }
        this.getSearchFlowForm(GetFlowView_Abs)
        break;
      case 'delform':
        // code block
        var del_setCond1 = '0'
        var del_setCond2 = '0'
        if(this.selectFilterCondition == 'All'){
          del_setCond1='0'
          del_setCond2='0'
        }
        else if(this.selectFilterCondition == 'vaType'){
          //篩選條件-假別種類
          del_setCond1='1'
          del_setCond2 = this.selcetHolidayID
        }
        else if(this.selectFilterCondition=='Sameday'){
          //篩選條件-當日請假
          del_setCond1='2'
          del_setCond2 = this.selcetTodaychooseID
        }
        var GetFlowView_Absc: GetFlowViewClass = {
          "ListEmpID": [
            "051005"
          ],
          "DateB": "2018/1/1",
          "DateE": "2019/12/31",
          "FormCode": "Absc",
          "State": this.selectState,
          "ProcessFlowID": "0",
          "Cond1": del_setCond1,
          "Cond2": del_setCond2,
          "Cond3": "0"
        }
        this.getSearchFlowForm(GetFlowView_Absc)
        break;
      case 'changeform':
        // code block
        var change_setCond1 = '0'
        if(this.selectFilterCondition == 'All'){
          change_setCond1='0'
        }
        else if(this.selectFilterCondition == 'pleasechange'){
          //篩選條件-請求調班
          change_setCond1='1'
        }else if(this.selectFilterCondition == 'twopeoplechange'){
          //篩選條件-雙人調班
          change_setCond1='2'
        }else if(this.selectFilterCondition == 'rzchange'){
          //篩選條件-例休互調
          change_setCond1='3'
        }

        var GetFlowView_ShiftRote: GetFlowViewClass = {
          "ListEmpID": [
            "051005"
          ],
          "DateB": "2018/1/1",
          "DateE": "2019/12/31",
          "FormCode": "ShiftRote",
          "State": this.selectState,
          "ProcessFlowID": "0",
          "Cond1": change_setCond1,
          "Cond2": "0",
          "Cond3": "0"
        }
        this.getSearchFlowForm(GetFlowView_ShiftRote)
        break;
      case 'forgetform':
        // code block
        var GetFlowView_Card: GetFlowViewClass = {
          "ListEmpID": [
            "051005"
          ],
          "DateB": "2018/1/1",
          "DateE": "2019/12/31",
          "FormCode": "Card",
          "State": this.selectState,
          "ProcessFlowID": "0",
          "Cond1": "0",
          "Cond2": "0",
          "Cond3": "0"
        }
        this.getSearchFlowForm(GetFlowView_Card)
        break;
    }


  }

  getSearchFlowForm(GetFlowView: GetFlowViewClass) {
    this.GetApiDataServiceService.getWebApiData_GetFlowView(GetFlowView)
    .pipe(takeWhile(()=>this.api_subscribe))
    .subscribe(
      (x: any) => {
        // console.log(x)
        this.setFlowView = x

        this.loading = false
        this.showSelectSearchForm = this.selectSearchForm; //顯示查詢結果
        this.isSearch = true;//顯示查詢結果

        // console.log(this.setFlowView)

        if (this.SearchVaFormComponent) {
          this.SearchVaFormComponent.onGoBackFunction();
        }else if(this.SearchForgetFormComponent){

        }else if(this.SearchDelFormComponent){
          
        }

      },
      error =>{
        alert('與api連線異常，getWebApiData_GetFlowView')  
      }
    )
  }


  ngAfterViewInit(): void {
    this.formEvent_TopDivGoTop;
    this.formEvent_WindowResize;
    this.windowSize()
    $("#id_bt_startday").change(function () {
      $("#id_ipt_startday").val($("#id_bt_startday").val())
      $("#id_ipt_endday").val($("#id_bt_startday").val())
    });
  }

  onCheckCollapseIn() {
    //確認是否收合
    if ($('#bt_sideMenu').hasClass('collapsed')) {
      $('#bt_sideMenu_text').text('收合查詢選單')
      $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
      $('#bt_sideMenu_img').css({ "transform": "rotate(-180deg)" });
      document.getElementById("phonetopdiv").style.height = '400px';
      $('#searchMenu').collapse('show')

      this.diolog_state = true
      $('body').css("overflow-y", "hidden");

    } else {
      $('#bt_sideMenu_text').text('展開查詢選單')
      $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
      $('#bt_sideMenu_img').css({ "transform": "rotate(0deg)" });
      document.getElementById("phonetopdiv").style.height = '90px';
      $('#searchMenu').collapse('hide')

      this.diolog_state = false
      $('body').css("overflow-y", "auto");
    }
  }

  formEvent_WindowResize = fromEvent(window, 'resize')
    //視窗大小改變時，修正width:800~1024的phonediv寬度及位置
    .pipe(debounceTime(0))
    .subscribe((event) => {
      // alert('改變視窗大小了')
      this.TopresizeNav();
      this.windowSize()
    })
  windowSize() {

    if (window.innerWidth > 800) {
      document.getElementById("phonetopdiv").style.position = 'unset';
      // document.getElementById("bt_sideMenu").style.visibility = 'hidden';
      $('#bt_sideMenu').css({ "visibility": "hidden" });
      $('#searchMenu').collapse('show')
      document.getElementById("phonetopdiv").style.overflowY = 'unset';
      document.getElementById("phonetopdiv").style.height = ' 100%';
      $('#bt_sideMenu_text').text('收合查詢選單')
      $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
      $('#bt_sideMenu_img').css({ "transform": "rotate(-180deg)" });


      this.diolog_state = false
      // $('body').css("overflow-y", "hidden");

    } else {
      document.getElementById("phonetopdiv").style.position = 'fixed';
      document.getElementById("phonetopdiv").style.height = '90px';
      // document.getElementById("phonetopdiv").style.height = '400px';
      document.getElementById("phonetopdiv").style.overflowY = 'auto';

      $('#bt_sideMenu_text').text('展開查詢選單')
      $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
      $('#bt_sideMenu_img').css({ "transform": "rotate(0deg)" });
      $('#searchMenu').collapse('hide')
      // document.getElementById("bt_sideMenu").style.visibility = 'visible';
      $('#bt_sideMenu').css({ "visibility": "visible" });


      this.diolog_state = false
      $('body').css("overflow-y", "auto");
    }
  }
  hideSearchDialog() {
    document.getElementById("phonetopdiv").style.position = 'fixed';
    document.getElementById("phonetopdiv").style.height = '90px';
    // document.getElementById("phonetopdiv").style.height = '400px';
    document.getElementById("phonetopdiv").style.overflowY = 'auto';

    $('#bt_sideMenu_text').text('展開查詢選單')
    $('#bt_sideMenu_img').css({ "transition": "transform 0.5s" });
    $('#bt_sideMenu_img').css({ "transform": "rotate(0deg)" });
    $('#searchMenu').collapse('hide')
    // document.getElementById("bt_sideMenu").style.visibility = 'visible';
    $('#bt_sideMenu').css({ "visibility": "visible" });

    this.diolog_state = false
    $('body').css("overflow-y", "auto");
  }
  formEvent_TopDivGoTop = fromEvent(window, 'scroll')
    //scroll向下拖拉把藍色區塊副標題蓋住
    .pipe(debounceTime(0)) //當使用者在0.01秒內沒動作就執行
    .pipe(takeWhile(()=>this.api_subscribe))
    .subscribe((event) => { //66~138
      var _wYnow = 0;
      if (window.scrollY > 71) {
        document.getElementById("phonetopdiv").style.top = '66px';
      } else {
        _wYnow = window.scrollY;
        var divtop = 138 - _wYnow;
        document.getElementById("phonetopdiv").style.top = divtop + 'px';
        //div隨著scroll拖拉上下移動
      }
      this.TopresizeNav();
    })
  TopresizeNav() {
    //修正width:800~1024的phonediv寬度及位置
    if (window.innerWidth > 800 && window.innerWidth < 1024) {
      if ($("body").hasClass("offcanvas-active")) {
        document.getElementById('phonetopdiv').style.left = '0px';
        document.getElementById('phonetopdiv').style.width = '100%';
      } else {
        document.getElementById('phonetopdiv').style.left = '220px';
        var rightwidth = window.innerWidth - 220;
        document.getElementById('phonetopdiv').style.width = rightwidth + 'px';
      }
    } else if (window.innerWidth < 800) {
      document.getElementById('phonetopdiv').style.left = '0px';
      document.getElementById('phonetopdiv').style.width = '100%';
    }
  }

  scrollTo(tag: string) {
    this.viewScroller.scrollToAnchor(tag);
    //tag=id連結位置
  }
}

class HoliDay {
  HoliDayID: string
  HoliDayNameC: string
  AutoFlowStart: string
  HoliDayKindID: string
  HoliDayCode: string
}





export class showFlowView {
  ProcessFlowID: number
  FormName: string
  AppEmpID: string
  AppEmpName: string
  AppDeptName: string
  ManageEmpName: string
  RealManageEmpName: string
  SignDate: string
  PendingDay: number
  Info: string
  State: string
  Take: boolean
}