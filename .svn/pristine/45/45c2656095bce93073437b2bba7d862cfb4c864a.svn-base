import { Component, OnInit, AfterContentInit, OnDestroy, NgZone } from '@angular/core';
import { ViewportScroller } from '@angular/common';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { GetApiUserService } from 'src/app/Service/get-api-user.service';
import { isValidDate } from 'src/app/UseVoid/void_isVaildDatetime';
import { takeWhile, concatMap } from 'rxjs/operators';
import { doFormatDate, doFormatDate_getMonthAndDay, formatDateTime, getapi_formatTimetoString } from 'src/app/UseVoid/void_doFormatDate';
import { GetAttendClass } from 'src/app/Models/PostData_API_Class/GetAttendClass';
import { chinesenum } from 'src/app/UseVoid/void_chinesenumber';
import { ShiftRoteSaveAndFlowStartClass } from 'src/app/Models/PostData_API_Class/ShiftRoteSaveAndFlowStartClass';
import { NgxSpinnerService } from 'ngx-spinner';
import { ExampleHeader } from 'src/app/Service/datepickerHeader';

declare let $: any; //use jquery

@Component({
  selector: 'app-change-rz-nr',
  templateUrl: './change-rz-nr.component.html',
  styleUrls: ['./change-rz-nr.component.css']
})
export class ChangeRzNRComponent implements OnInit, OnDestroy {
  exampleHeader = ExampleHeader //日期套件header
  ngOnDestroy(): void {
    // throw new Error("Method not implemented.");
    this.api_subscribe = false;
  }
  api_subscribe = true
  agreeCheckbox: boolean = false
  selectRZBoxArray: any;
  selectRZLoading: boolean = false
  ngZone: NgZone = new NgZone({ enableLongStackTrace: true });
  setSelectRzChangeBox() {
    var iptdate = new Date($("#id_ipt_startday").val())
    var selectDateB = doFormatDate(iptdate)

    var ErrorMsg = this.GetApiDataServiceService.getWebApiData_GetShiftRoteDateRange(selectDateB, this.oneP.EmpCode)
      .pipe(takeWhile(() => this.api_subscribe))
      .subscribe(
        (x: any) => {
          if (x.MessageCode) {
            //判斷資料進行中是否有異常錯誤
            alert(this.oneP.EmpCode + x.MessageContent)
            ErrorMsg.unsubscribe()
          } else {
            this.GetApiDataServiceService.getWebApiData_GetHolidayShiftRote(selectDateB, this.oneP.EmpCode)
              .pipe(takeWhile(() => this.api_subscribe))
              .subscribe(
                (x: Array<any>) => {
                  this.selectRZBoxArray = []

                  this.selectRZLoading = false
                  this.ngZone.run(() => { });
                  this.LoadingPage.show()
                  var checkHaveDate = x.filter(item => {
                    return doFormatDate(item.AttendDate) == selectDateB
                  })
                  if (x.length > 1) {
                    if (checkHaveDate.length > 0) {
                      // console.log('可換')
                      for (let data of x) {
                        data.AttendDate = doFormatDate(data.AttendDate)
                        if (checkHaveDate[0].ActualRote.RoteID == data.ActualRote.RoteID) {

                        } else {
                          this.selectRZBoxArray.push(data)
                          this.selectChangeRZ = data
                        }
                      }
                      // console.log(this.selectRZBoxArray)
                      this.selectRZLoading = true
                      this.ngZone.run(() => {
                        this.LoadingPage.hide()
                      });
                    } else {
                      this.LoadingPage.hide()
                      alert('此日期不符合休假與例假互換規則')
                    }
                  } else {
                    this.LoadingPage.hide()
                    alert('此日期無互換假別')
                  }

                }
                , error => {
                  alert('與api連線異常，getWebApiData_GetHolidayShiftRote')
                  this.LoadingPage.hide()
                }
              )
          }
        },error => {
          alert('與api連線異常，getWebApiData_GetShiftRoteDateRange')
          this.LoadingPage.hide()
        }
      )
  }

  selectChangeRZ: any = ''


  writeState = 1; //步驟一

  oneP: oneP_Class = new oneP_Class()

  constructor(
    private GetApiDataServiceService: GetApiDataServiceService,
    private GetApiUserService: GetApiUserService,
    private viewScroller: ViewportScroller,
    private LoadingPage: NgxSpinnerService) { }

  ngOnInit() {
    this.GetApiUserService.counter$.subscribe(
      x => {
        this.oneP.EmpCode = x.EmpCode
        if (x.EmpNameC) {
          this.oneP.EmpName = x.EmpNameC
        } else {
          this.oneP.EmpName = x.EmpNameE
        }
      }
    )

  }

  selectDay: selectuiShow
  selectChangeDay: selectuiShow

  scrollTo() {
    this.viewScroller.scrollToAnchor('goPageChange');
    //tag=id連結位置
  }

  SetUiActive() {
    $('#navs li').filter('.active').removeClass('active');
    $('#li' + this.writeState.toString()).addClass('active')
    this.scrollTo();
  }
  nextPage() {
    if (this.selectRZLoading && this.selectChangeRZ.length != 0) {
      // console.log(this.selectChangeRZ)
      this.writeState += 1;
      this.SetUiActive()
      this.LoadingPage.show()
      var first = this.GetApiDataServiceService.getWebApiData_GetShiftRoteDateRange(this.selectChangeRZ.AttendDate, this.oneP.EmpCode)
        .pipe(
          concatMap(
            (x: any) => {
              if (x.MessageCode) {
                //判斷資料進行中是否有異常錯誤
                alert(this.oneP.EmpCode + x.MessageContent)
                first.unsubscribe()
              } else {
                var Attend: GetAttendClass = {
                  DateB: x.DateA,
                  DateE: x.DateD,
                  ListEmpID: [this.oneP.EmpCode],
                  ListRoteID: null
                }
                return this.GetApiDataServiceService.getWebApiData_GetAttend(Attend)
              }
            }
          )
        )
        .pipe(takeWhile(() => this.api_subscribe))
        .subscribe(
          (x: any) => {
            // console.log(x)
            this.selectDay = null
            this.selectChangeDay = null
            this.oneP = {
              EmpCode: this.oneP.EmpCode,
              EmpName: this.oneP.EmpName,
              work: []
            }
            for (let data of x) {
              var setAttendDate = doFormatDate_getMonthAndDay(formatDateTime(data.AttendDate).getDate)
              var isSelect: boolean = false
              var dataAttenDate = doFormatDate(data.AttendDate)
              var calDate = new Date(formatDateTime(data.AttendDate).getDate + ' ' + getapi_formatTimetoString(formatDateTime(data.AttendDate).getTime))
              var calDate_dayofweek = calDate.getDay()
              if (calDate_dayofweek == 0) {
                calDate_dayofweek = 7
              }


              var iptdate = new Date($("#id_ipt_startday").val())
              var selectDateB = doFormatDate(iptdate)
              if (dataAttenDate == this.selectChangeRZ.AttendDate || dataAttenDate == selectDateB) {
                isSelect = true
                var showDayofWeek = ''
                if (calDate_dayofweek == 7) {
                  showDayofWeek = '日'
                } else {
                  showDayofWeek = chinesenum(calDate_dayofweek)
                }

                if (!this.selectDay) {

                  this.selectDay = {
                    date: setAttendDate,
                    job: data.ActualRote.RoteCode,
                    RoteName: data.ActualRote.RoteNameC,
                    RoteID: data.ActualRote.RoteID,
                    realdate: formatDateTime(data.AttendDate).getDate,
                    isSelect: isSelect,
                    dayofweek: showDayofWeek
                  }
                } else {
                  this.selectChangeDay = {
                    date: setAttendDate,
                    job: data.ActualRote.RoteCode,
                    RoteName: data.ActualRote.RoteNameC,
                    RoteID: data.ActualRote.RoteID,
                    realdate: formatDateTime(data.AttendDate).getDate,
                    isSelect: isSelect,
                    dayofweek: showDayofWeek
                  }
                }

              }
              this.oneP.work.push(
                {
                  date: setAttendDate,
                  job: data.ActualRote.RoteCode,
                  realdate: formatDateTime(data.AttendDate).getDate,
                  RoteName: data.ActualRote.RoteNameC,
                  RoteID: data.ActualRote.RoteID,
                  isSelect: isSelect,
                  dayofweek: chinesenum(calDate_dayofweek)
                })
            }
            // this.SetUiChangeDate()
            // console.log(this.oneP)

            this.LoadingPage.hide()
          },
          (error: any) => {
            alert('與api連線異常，第一個人員，getWebApiData_GetShiftRoteDateRange')

            this.LoadingPage.hide()
          }
        )
    } else {
      alert('請選擇互換例休日')

      this.LoadingPage.hide()
    }
  }

  setDivStyle(selectData: selectuiShow) {
    if (selectData.isSelect) {
      return 'selectDiv'
    } else {
      return 'DivStyle'
    }
  }

  prePage() {
    // this.selectChangeRZ = ''
    this.writeState -= 1;
    // this.selectDay = []
    // for (let ui of this.uiShow) {
    //   ui.Clickselect = false
    // }
    this.SetUiActive()
  }

  NoteString: string
  FlowDynamic_EmpID: string;

  chooseBase(e) {
    var id
    if (e.length == 0) {
      id = null
      // console.log('清除員工資料')
    } else {
      id = e[0].value.split('，')[0]
    }
    this.FlowDynamic_EmpID = id

  }

  disableSend() {
    if (!this.agreeCheckbox) {
      return true
    } else {
      return false
    }
  }
  checksenderror() {
    if (!this.agreeCheckbox) {
      alert('請勾選同意書')
    } else {
      $('#checksenddialog').modal('show');
    }
  }

  sendandSaveChangeform() {
    // console.log(this.selectDay)
    alert('api尚未完成')
    var sendShift = []
    sendShift.push(
      {
        "ShiftRoteDate": this.selectDay.realdate,
        "RoteID1": this.selectDay.RoteID,
        "RoteCode1": this.selectDay.job,
        "RoteName1": this.selectDay.RoteName,
        "RoteID2": this.selectChangeDay.RoteID,
        "RoteCode2": this.selectChangeDay.job,
        "RoteName2": this.selectChangeDay.RoteName
      }
    )
    sendShift.push(
      {
        "ShiftRoteDate": this.selectChangeDay.realdate,
        "RoteID1": this.selectChangeDay.RoteID,
        "RoteCode1": this.selectChangeDay.job,
        "RoteName1": this.selectChangeDay.RoteName,
        "RoteID2": this.selectDay.RoteID,
        "RoteCode2": this.selectDay.job,
        "RoteName2": this.selectDay.RoteName
      }
    )

    var ShiftRoteSaveAndFlowStart: ShiftRoteSaveAndFlowStartClass = {
      "FlowApp": {
        "ShiftRoteType": "RZ",
        "ShiftRoteName": "例休互調",
        "FlowApps": [
          {
            "EmpID1": this.oneP.EmpCode,
            "EmpCode1": this.oneP.EmpCode,
            "EmpNameC1": this.oneP.EmpName,
            "EmpID2": this.oneP.EmpCode,
            "EmpCode2": this.oneP.EmpCode,
            "EmpNameC2": this.oneP.EmpName,
            "Note": this.NoteString,
            "Info": "",
            "MailBody": "",
            "State": "1",
            "ShiftRoteFlowAppsDetail": sendShift
          }
        ],
        "EmpID": this.oneP.EmpCode,
        "EmpCode": this.oneP.EmpCode,
        "EmpNameC": this.oneP.EmpName,
        "State": "1" //1是要簽核
      },
      "FlowDynamic": {
        "FlowNode": "502",
        "RoleID": "",
        "EmpID": this.FlowDynamic_EmpID
      }
    }
    // console.log(ShiftRoteSaveAndFlowStart)
    // this.LoadingPage.show()
    // this.GetApiDataServiceService.getWebApiData_ShiftRoteSaveAndFlowStart(ShiftRoteSaveAndFlowStart)
    //   .pipe(takeWhile(() => this.api_subscribe))
    //   .subscribe(
    //     (x: any) => {
    //       $('#sussesdialog').modal('show');
    //       this.LoadingPage.hide()
    //     }, error => {
    //       alert('與api連線異常，getWebApiData_ShiftRoteSaveAndFlowStart')
    //       this.LoadingPage.hide()
    //     }
    //   )
  }

}

class oneP_Class {
  EmpCode: string
  EmpName: string
  work: selectuiShow[]
}
class selectuiShow {
  date: string;
  job: string;
  RoteID: string;
  RoteName: string;
  realdate: string;
  isSelect: boolean;
  dayofweek: string
}
