import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { GetApiDataServiceService } from './get-api-data-service.service';
import { GetAttendClass } from '../Models/PostData_API_Class/GetAttendClass';
import { doFormatDate, timeZone_tw } from '../UseVoid/void_doFormatDate';
import { GetAttendInfoClass } from '../Models/PostData_API_Class/GetAttendInfoClass';
import { showAttendClass } from '../Models/showAttendClass';
import { chinesenum } from '../UseVoid/void_chinesenumber';
import { GetBaseInfoDetailClass } from '../Models/GetBaseInfoDetailClass';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class GetApiUserService {
  private store$: BehaviorSubject<GetBaseInfoDetailClass> = new BehaviorSubject<any>(0);
  counter$: Observable<GetBaseInfoDetailClass> = this.store$;
  //選擇當前操作人員、部門。

  private AllOneBaseDetail$: BehaviorSubject<GetBaseInfoDetailClass[]> = new BehaviorSubject<GetBaseInfoDetailClass[]>([]);
  AllOneBaseDetailcounter$: Observable<GetBaseInfoDetailClass[]> = this.AllOneBaseDetail$;
  //這個人員所有兼職多角色切換。
  // 634438
  ReallyEmpID = '644488'//第一次登入系統的id
  constructor(private GetApiDataServiceService: GetApiDataServiceService, private router: Router) {

    this.GetApiDataServiceService.getWebApiData_GetBaseInfoDetail(this.ReallyEmpID)
      .subscribe(
        (GetBaseInfoDetail: GetBaseInfoDetailClass[]) => {
          // console.log(GetBaseInfoDetail)
          this.AllOneBaseDetail$.next(GetBaseInfoDetail)

          for (let BaseInfoDetail of GetBaseInfoDetail) {
            if (BaseInfoDetail.PosType == 'M') {
              this.store$.next(BaseInfoDetail)
            }
          }
        },
        error => {
          alert('與api連線異常，getWebApiData_GetBaseInfoDetail')
          this.router.navigate(['ErrorPageComponent']);
        }
      )
    // this.store$.next({ EmpCode: '051005', Name: '王O懿', Dept: '會計行政部', RoteNameC: '常日班', WorkHours: 8 })

  }

  onChange(event) {
    //切換人員
    this.store$.next(event);
  }

  onAllChange(event) {
    //主要給切換部門的下拉選單用
    this.AllOneBaseDetail$.next(event);
  }


  /**
   * @todo 輸入工號回傳一周差勤紀錄
   * @param EmpID 工號
   */
  GetWeekAttendInfo(EmpID: string) {
    var bfFiveDate = new Date();
    var afFiveDate = new Date();
    var bfFiveDate_Format = doFormatDate(bfFiveDate.setDate(bfFiveDate.getDate() - 5));
    var afFiveDate_Format = doFormatDate(afFiveDate.setDate(afFiveDate.getDate() + 5));
    var GetAttendInfo: GetAttendInfoClass = { DateB: bfFiveDate_Format, DateE: afFiveDate_Format, ListEmpID: [EmpID], EffectDate: "", Display: '1', ListState: ["1", "2", "3"] }

    this.GetApiDataServiceService.getWebApiData_GetAttendInfo(GetAttendInfo).subscribe(
      (x: any) => {
        var showAttendArray = [];
        var returnAttendArray = [];

        for (let data of x) {
          var showAttend: showAttendClass = new showAttendClass();
          var date = timeZone_tw(new Date(data.AttendDate))
          showAttend.AttendDate = doFormatDate(date)


          if (date.getDay() == 0) {
            showAttend.DayOfWeek = '日'
          } else {
            showAttend.DayOfWeek = chinesenum(date.getDay())
          }

          showAttend.RoteNameC = data.RoteNameC
          showAttend.OnTime = data.OnTime
          showAttend.OffTime = data.OffTime

          if (data.LateMins > 0) {
            showAttend.LateMins = true;
          } else {
            showAttend.LateMins = false;
          }

          if (data.IsAbsent) {
            showAttend.IsAbsent = true;
          } else {
            showAttend.IsAbsent = false;
          }

          if (data.EarlyMins > 0) {
            showAttend.EarlyMins = true;

          } else {
            showAttend.EarlyMins = false;

          }
          showAttendArray.push(showAttend)
        }

        for (let showAttend of showAttendArray) {
          if (showAttend.RoteNameC == '休息日' || showAttend.RoteNameC == '例假日') {

          } else {
            returnAttendArray.push(showAttend)
          }
        }

        if (returnAttendArray.length > 6) {
          returnAttendArray.splice(7)
          console.log(returnAttendArray)
        }

      }
    );
  }


}