import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { GetApiDataServiceService } from 'src/app/Service/get-api-data-service.service';
import { GetApiUserService } from 'src/app/Service/get-api-user.service';
import { NgxSpinnerService } from 'ngx-spinner';
import { CaUserClass } from 'src/app/Models/CaUserClass';

@Component({
  selector: 'app-link-outhpage',
  templateUrl: './link-outhpage.component.html',
  styleUrls: ['./link-outhpage.component.css']
})
export class LinkOuthpageComponent implements OnInit {

  constructor(private route: Router,
    private GetApiDataServiceService: GetApiDataServiceService,
    private GetApiUserService: GetApiUserService,
    private LoadingPage: NgxSpinnerService) { }

  ngOnInit() {
    var urlQuery:any = this.queryString()
    console.log(urlQuery.code)
    this.regitPage(urlQuery)
  }

  regitPage(urlQuery:any) {
    if (urlQuery.state) {
      this.regitSussesState(urlQuery)
    }
  }

  regitSussesState(urlQuery) {
    if (urlQuery.error && urlQuery.error_description) {

      alert(urlQuery.error_description)
      this.route.navigateByUrl('/ErrorPageComponent')
      this.LoadingPage.hide()

    } else if (urlQuery.code) {

      localStorage.setItem('code', urlQuery.code)
      this.GetApiDataServiceService.getWebApiData_Token(urlQuery.code).subscribe(
        (x: CaUserClass) => {
          this.LoadingPage.show()
          if (x) {
            localStorage.setItem('FirstLoginUserID', x.EmpID)
            localStorage.setItem('NowLoginUserID', x.EmpID)
            this.route.navigateByUrl('/nav')
          }
        }, error => {
          this.route.navigateByUrl('/ErrorPageComponent')
          alert('與api連線異常，getWebApiData_Token')
          this.LoadingPage.hide()
        }
      )

    }
  }

  queryString() {
    // This function is anonymous, is executed immediately and
    // the return value is assigned to QueryString!
    var query_string = {};
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split("=");
      // If first entry with this name
      if (typeof query_string[pair[0]] === "undefined") {
        query_string[pair[0]] = pair[1];
        // If second entry with this name
      } else if (typeof query_string[pair[0]] === "string") {
        var arr = [query_string[pair[0]], pair[1]];
        query_string[pair[0]] = arr;
        // If third or later entry with this name
      } else {
        query_string[pair[0]].push(pair[1]);
      }
    }
    return query_string;
  }

}
